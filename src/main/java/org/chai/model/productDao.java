package org.chai.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.chai.model.product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class productDao extends AbstractDao<product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductGroup = new Property(1, String.class, "productGroup", false, "PRODUCT_GROUP");
        public final static Property ProductName = new Property(2, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property BrandName = new Property(3, String.class, "brandName", false, "BRAND_NAME");
        public final static Property Formulation = new Property(4, String.class, "formulation", false, "FORMULATION");
        public final static Property UnitOfMeasure = new Property(5, String.class, "unitOfMeasure", false, "UNIT_OF_MEASURE");
        public final static Property UnitPrice = new Property(6, double.class, "unitPrice", false, "UNIT_PRICE");
    };

    private DaoSession daoSession;


    public productDao(DaoConfig config) {
        super(config);
    }
    
    public productDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PRODUCT_GROUP' TEXT NOT NULL ," + // 1: productGroup
                "'PRODUCT_NAME' TEXT NOT NULL ," + // 2: productName
                "'BRAND_NAME' TEXT NOT NULL ," + // 3: brandName
                "'FORMULATION' TEXT NOT NULL ," + // 4: formulation
                "'UNIT_OF_MEASURE' TEXT NOT NULL ," + // 5: unitOfMeasure
                "'UNIT_PRICE' REAL NOT NULL );"); // 6: unitPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getProductGroup());
        stmt.bindString(3, entity.getProductName());
        stmt.bindString(4, entity.getBrandName());
        stmt.bindString(5, entity.getFormulation());
        stmt.bindString(6, entity.getUnitOfMeasure());
        stmt.bindDouble(7, entity.getUnitPrice());
    }

    @Override
    protected void attachEntity(product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public product readEntity(Cursor cursor, int offset) {
        product entity = new product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // productGroup
            cursor.getString(offset + 2), // productName
            cursor.getString(offset + 3), // brandName
            cursor.getString(offset + 4), // formulation
            cursor.getString(offset + 5), // unitOfMeasure
            cursor.getDouble(offset + 6) // unitPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductGroup(cursor.getString(offset + 1));
        entity.setProductName(cursor.getString(offset + 2));
        entity.setBrandName(cursor.getString(offset + 3));
        entity.setFormulation(cursor.getString(offset + 4));
        entity.setUnitOfMeasure(cursor.getString(offset + 5));
        entity.setUnitPrice(cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
