package org.chai.model;

import de.greenrobot.dao.DaoException;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PARISH.
 */
public class Parish {

    /** Not-null value. */
    private String uuid;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String subCountyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParishDao myDao;

    private Subcounty subcounty;
    private String subcounty__resolvedKey;

    private List<Village> villages;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Parish() {
    }

    public Parish(String uuid) {
        this.uuid = uuid;
    }

    public Parish(String uuid, String name, String subCountyId) {
        this.uuid = uuid;
        this.name = name;
        this.subCountyId = subCountyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParishDao() : null;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getSubCountyId() {
        return subCountyId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSubCountyId(String subCountyId) {
        this.subCountyId = subCountyId;
    }

    /** To-one relationship, resolved on first access. */
    public Subcounty getSubcounty() {
        String __key = this.subCountyId;
        if (subcounty__resolvedKey == null || subcounty__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubcountyDao targetDao = daoSession.getSubcountyDao();
            Subcounty subcountyNew = targetDao.load(__key);
            synchronized (this) {
                subcounty = subcountyNew;
            	subcounty__resolvedKey = __key;
            }
        }
        return subcounty;
    }

    public void setSubcounty(Subcounty subcounty) {
        if (subcounty == null) {
            throw new DaoException("To-one property 'subCountyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.subcounty = subcounty;
            subCountyId = subcounty.getUuid();
            subcounty__resolvedKey = subCountyId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Village> getVillages() {
        if (villages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VillageDao targetDao = daoSession.getVillageDao();
            List<Village> villagesNew = targetDao._queryParish_Villages(uuid);
            synchronized (this) {
                if(villages == null) {
                    villages = villagesNew;
                }
            }
        }
        return villages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVillages() {
        villages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
