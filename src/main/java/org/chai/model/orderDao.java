package org.chai.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table orders.
*/
public class orderDao extends AbstractDao<order, Long> {

    public static final String TABLENAME = "orders";

    /**
     * Properties of entity order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quantity = new Property(1, double.class, "quantity", false, "QUANTITY");
        public final static Property DeliveryDate = new Property(2, java.util.Date.class, "deliveryDate", false, "DELIVERY_DATE");
        public final static Property OrderDate = new Property(3, java.util.Date.class, "orderDate", false, "ORDER_DATE");
        public final static Property ContactTel = new Property(4, String.class, "contactTel", false, "CONTACT_TEL");
        public final static Property ContactName = new Property(5, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property CustomerId = new Property(6, long.class, "customerId", false, "CUSTOMER_ID");
        public final static Property ProductId = new Property(7, long.class, "productId", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<order> customer_OrdersQuery;
    private Query<order> product_OrdersQuery;

    public orderDao(DaoConfig config) {
        super(config);
    }
    
    public orderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'orders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'QUANTITY' REAL NOT NULL ," + // 1: quantity
                "'DELIVERY_DATE' INTEGER NOT NULL ," + // 2: deliveryDate
                "'ORDER_DATE' INTEGER NOT NULL ," + // 3: orderDate
                "'CONTACT_TEL' TEXT NOT NULL ," + // 4: contactTel
                "'CONTACT_NAME' TEXT NOT NULL ," + // 5: contactName
                "'CUSTOMER_ID' INTEGER NOT NULL ," + // 6: customerId
                "'PRODUCT_ID' INTEGER NOT NULL );"); // 7: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'orders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getQuantity());
        stmt.bindLong(3, entity.getDeliveryDate().getTime());
        stmt.bindLong(4, entity.getOrderDate().getTime());
        stmt.bindString(5, entity.getContactTel());
        stmt.bindString(6, entity.getContactName());
        stmt.bindLong(7, entity.getCustomerId());
        stmt.bindLong(8, entity.getProductId());
    }

    @Override
    protected void attachEntity(order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public order readEntity(Cursor cursor, int offset) {
        order entity = new order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // quantity
            new java.util.Date(cursor.getLong(offset + 2)), // deliveryDate
            new java.util.Date(cursor.getLong(offset + 3)), // orderDate
            cursor.getString(offset + 4), // contactTel
            cursor.getString(offset + 5), // contactName
            cursor.getLong(offset + 6), // customerId
            cursor.getLong(offset + 7) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuantity(cursor.getDouble(offset + 1));
        entity.setDeliveryDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setOrderDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setContactTel(cursor.getString(offset + 4));
        entity.setContactName(cursor.getString(offset + 5));
        entity.setCustomerId(cursor.getLong(offset + 6));
        entity.setProductId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of customer. */
    public List<order> _queryCustomer_Orders(long customerId) {
        synchronized (this) {
            if (customer_OrdersQuery == null) {
                QueryBuilder<order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                queryBuilder.orderRaw("ORDER_DATE ASC");
                customer_OrdersQuery = queryBuilder.build();
            }
        }
        Query<order> query = customer_OrdersQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

    /** Internal query to resolve the "orders" to-many relationship of product. */
    public List<order> _queryProduct_Orders(long productId) {
        synchronized (this) {
            if (product_OrdersQuery == null) {
                QueryBuilder<order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                queryBuilder.orderRaw("ORDER_DATE ASC");
                product_OrdersQuery = queryBuilder.build();
            }
        }
        Query<order> query = product_OrdersQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

}
