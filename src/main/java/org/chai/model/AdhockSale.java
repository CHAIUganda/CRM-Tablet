package org.chai.model;

import java.util.List;
import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
@JsonIgnoreProperties(ignoreUnknown = true)
// KEEP INCLUDES END
/**
 * Entity mapped to table ADHOCK_SALE.
 */
public class AdhockSale {

    private Long id;
    /** Not-null value. */
    private String clientRefId;
    /** Not-null value. */
    private java.util.Date dateOfSale;
    private Boolean doYouStockOrsZinc;
    private Integer howManyZincInStock;
    private Integer howmanyOrsInStock;
    private String ifNoWhy;
    private String pointOfsaleMaterial;
    private String recommendationNextStep;
    private String recommendationLevel;
    private String governmentApproval;
    private String customerId;
    private long customerRefId;


    private List<SaleData> adhockSalesDatas;

    // KEEP FIELDS - put your custom fields here

    /** Used to resolve relations */
    @JsonIgnore
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @JsonIgnore
    private transient AdhockSaleDao myDao;

    @JsonIgnore
    private Customer customer;
    @JsonIgnore
    private Long customer__resolvedKey;
    // KEEP FIELDS END

    public AdhockSale() {
    }

    public AdhockSale(Long id) {
        this.id = id;
    }

    public AdhockSale(Long id, String clientRefId, java.util.Date dateOfSale, Boolean doYouStockOrsZinc, Integer howManyZincInStock, Integer howmanyOrsInStock, String ifNoWhy, String pointOfsaleMaterial, String recommendationNextStep, String recommendationLevel, String governmentApproval, String customerId, long customerRefId) {
        this.id = id;
        this.clientRefId = clientRefId;
        this.dateOfSale = dateOfSale;
        this.doYouStockOrsZinc = doYouStockOrsZinc;
        this.howManyZincInStock = howManyZincInStock;
        this.howmanyOrsInStock = howmanyOrsInStock;
        this.ifNoWhy = ifNoWhy;
        this.pointOfsaleMaterial = pointOfsaleMaterial;
        this.recommendationNextStep = recommendationNextStep;
        this.recommendationLevel = recommendationLevel;
        this.governmentApproval = governmentApproval;
        this.customerId = customerId;
        this.customerRefId = customerRefId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdhockSaleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getClientRefId() {
        return clientRefId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setClientRefId(String clientRefId) {
        this.clientRefId = clientRefId;
    }

    /** Not-null value. */
    public java.util.Date getDateOfSale() {
        return dateOfSale;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDateOfSale(java.util.Date dateOfSale) {
        this.dateOfSale = dateOfSale;
    }

    public Boolean getDoYouStockOrsZinc() {
        return doYouStockOrsZinc;
    }

    public void setDoYouStockOrsZinc(Boolean doYouStockOrsZinc) {
        this.doYouStockOrsZinc = doYouStockOrsZinc;
    }

    public Integer getHowManyZincInStock() {
        return howManyZincInStock;
    }

    public void setHowManyZincInStock(Integer howManyZincInStock) {
        this.howManyZincInStock = howManyZincInStock;
    }

    public Integer getHowmanyOrsInStock() {
        return howmanyOrsInStock;
    }

    public void setHowmanyOrsInStock(Integer howmanyOrsInStock) {
        this.howmanyOrsInStock = howmanyOrsInStock;
    }

    public String getIfNoWhy() {
        return ifNoWhy;
    }

    public void setIfNoWhy(String ifNoWhy) {
        this.ifNoWhy = ifNoWhy;
    }

    public String getPointOfsaleMaterial() {
        return pointOfsaleMaterial;
    }

    public void setPointOfsaleMaterial(String pointOfsaleMaterial) {
        this.pointOfsaleMaterial = pointOfsaleMaterial;
    }

    public String getRecommendationNextStep() {
        return recommendationNextStep;
    }

    public void setRecommendationNextStep(String recommendationNextStep) {
        this.recommendationNextStep = recommendationNextStep;
    }

    public String getRecommendationLevel() {
        return recommendationLevel;
    }

    public void setRecommendationLevel(String recommendationLevel) {
        this.recommendationLevel = recommendationLevel;
    }

    public String getGovernmentApproval() {
        return governmentApproval;
    }

    public void setGovernmentApproval(String governmentApproval) {
        this.governmentApproval = governmentApproval;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public long getCustomerRefId() {
        return customerRefId;
    }

    public void setCustomerRefId(long customerRefId) {
        this.customerRefId = customerRefId;
    }

    /** To-one relationship, resolved on first access. */
    public Customer getCustomer() {
        long __key = this.customerRefId;
        if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerDao targetDao = daoSession.getCustomerDao();
            Customer customerNew = targetDao.load(__key);
            synchronized (this) {
                customer = customerNew;
            	customer__resolvedKey = __key;
            }
        }
        return customer;
    }

    public void setCustomer(Customer customer) {
        if (customer == null) {
            throw new DaoException("To-one property 'customerRefId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.customer = customer;
            customerRefId = customer.getId();
            customer__resolvedKey = customerRefId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleData> getAdhockSalesDatas() {
        if (adhockSalesDatas == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleDataDao targetDao = daoSession.getSaleDataDao();
            List<SaleData> adhockSalesDatasNew = targetDao._queryAdhockSale_AdhockSalesDatas(id);
            synchronized (this) {
                if(adhockSalesDatas == null) {
                    adhockSalesDatas = adhockSalesDatasNew;
                }
            }
        }
        return adhockSalesDatas;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAdhockSalesDatas() {
        adhockSalesDatas = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
