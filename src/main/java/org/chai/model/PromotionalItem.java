package org.chai.model;

import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PROMOTIONAL_ITEM.
 */
public class PromotionalItem {

    private Long id;
    /** Not-null value. */
    private String sysid;
    /** Not-null value. */
    private String name;
    private long promotionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PromotionalItemDao myDao;

    private Promotion promotion;
    private Long promotion__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PromotionalItem() {
    }

    public PromotionalItem(Long id) {
        this.id = id;
    }

    public PromotionalItem(Long id, String sysid, String name, long promotionId) {
        this.id = id;
        this.sysid = sysid;
        this.name = name;
        this.promotionId = promotionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPromotionalItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSysid() {
        return sysid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSysid(String sysid) {
        this.sysid = sysid;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getPromotionId() {
        return promotionId;
    }

    public void setPromotionId(long promotionId) {
        this.promotionId = promotionId;
    }

    /** To-one relationship, resolved on first access. */
    public Promotion getPromotion() {
        long __key = this.promotionId;
        if (promotion__resolvedKey == null || !promotion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PromotionDao targetDao = daoSession.getPromotionDao();
            Promotion promotionNew = targetDao.load(__key);
            synchronized (this) {
                promotion = promotionNew;
            	promotion__resolvedKey = __key;
            }
        }
        return promotion;
    }

    public void setPromotion(Promotion promotion) {
        if (promotion == null) {
            throw new DaoException("To-one property 'promotionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.promotion = promotion;
            promotionId = promotion.getId();
            promotion__resolvedKey = promotionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
