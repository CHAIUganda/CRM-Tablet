package org.chai.model;

import java.util.List;
import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CUSTOMER.
 */
public class Customer {

    private Long id;
    /** Not-null value. */
    private String uuid;
    private Double latitude;
    private Double longitude;
    /** Not-null value. */
    private String outletName;
    private String outletType;
    private String outletSize;
    private byte[] outletPicture;
    private String split;
    private String openingHours;
    private String majoritySourceOfSupply;
    private String keyWholeSalerName;
    private String keyWholeSalerContact;
    private String buildingStructure;
    private String equipment;
    private String typeOfLicence;
    private String descriptionOfOutletLocation;
    private Integer numberOfEmployees;
    private Integer numberOfBranches;
    private Integer numberOfCustomersPerDay;
    private String numberOfProducts;
    private Integer restockFrequency;
    private String turnOver;
    private Integer tenureLengthYears;
    private Integer tenureLengthMonths;
    private java.util.Date dateCreated;
    private java.util.Date lastUpdated;
    private long villageId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CustomerDao myDao;

    private Village village;
    private Long village__resolvedKey;

    private List<CustomerContact> customerContacts;
    private List<Order> orders;
    private List<Task> tasks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Customer() {
    }

    public Customer(Long id) {
        this.id = id;
    }

    public Customer(Long id, String uuid, Double latitude, Double longitude, String outletName, String outletType, String outletSize, byte[] outletPicture, String split, String openingHours, String majoritySourceOfSupply, String keyWholeSalerName, String keyWholeSalerContact, String buildingStructure, String equipment, String typeOfLicence, String descriptionOfOutletLocation, Integer numberOfEmployees, Integer numberOfBranches, Integer numberOfCustomersPerDay, String numberOfProducts, Integer restockFrequency, String turnOver, Integer tenureLengthYears, Integer tenureLengthMonths, java.util.Date dateCreated, java.util.Date lastUpdated, long villageId) {
        this.id = id;
        this.uuid = uuid;
        this.latitude = latitude;
        this.longitude = longitude;
        this.outletName = outletName;
        this.outletType = outletType;
        this.outletSize = outletSize;
        this.outletPicture = outletPicture;
        this.split = split;
        this.openingHours = openingHours;
        this.majoritySourceOfSupply = majoritySourceOfSupply;
        this.keyWholeSalerName = keyWholeSalerName;
        this.keyWholeSalerContact = keyWholeSalerContact;
        this.buildingStructure = buildingStructure;
        this.equipment = equipment;
        this.typeOfLicence = typeOfLicence;
        this.descriptionOfOutletLocation = descriptionOfOutletLocation;
        this.numberOfEmployees = numberOfEmployees;
        this.numberOfBranches = numberOfBranches;
        this.numberOfCustomersPerDay = numberOfCustomersPerDay;
        this.numberOfProducts = numberOfProducts;
        this.restockFrequency = restockFrequency;
        this.turnOver = turnOver;
        this.tenureLengthYears = tenureLengthYears;
        this.tenureLengthMonths = tenureLengthMonths;
        this.dateCreated = dateCreated;
        this.lastUpdated = lastUpdated;
        this.villageId = villageId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    /** Not-null value. */
    public String getOutletName() {
        return outletName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOutletName(String outletName) {
        this.outletName = outletName;
    }

    public String getOutletType() {
        return outletType;
    }

    public void setOutletType(String outletType) {
        this.outletType = outletType;
    }

    public String getOutletSize() {
        return outletSize;
    }

    public void setOutletSize(String outletSize) {
        this.outletSize = outletSize;
    }

    public byte[] getOutletPicture() {
        return outletPicture;
    }

    public void setOutletPicture(byte[] outletPicture) {
        this.outletPicture = outletPicture;
    }

    public String getSplit() {
        return split;
    }

    public void setSplit(String split) {
        this.split = split;
    }

    public String getOpeningHours() {
        return openingHours;
    }

    public void setOpeningHours(String openingHours) {
        this.openingHours = openingHours;
    }

    public String getMajoritySourceOfSupply() {
        return majoritySourceOfSupply;
    }

    public void setMajoritySourceOfSupply(String majoritySourceOfSupply) {
        this.majoritySourceOfSupply = majoritySourceOfSupply;
    }

    public String getKeyWholeSalerName() {
        return keyWholeSalerName;
    }

    public void setKeyWholeSalerName(String keyWholeSalerName) {
        this.keyWholeSalerName = keyWholeSalerName;
    }

    public String getKeyWholeSalerContact() {
        return keyWholeSalerContact;
    }

    public void setKeyWholeSalerContact(String keyWholeSalerContact) {
        this.keyWholeSalerContact = keyWholeSalerContact;
    }

    public String getBuildingStructure() {
        return buildingStructure;
    }

    public void setBuildingStructure(String buildingStructure) {
        this.buildingStructure = buildingStructure;
    }

    public String getEquipment() {
        return equipment;
    }

    public void setEquipment(String equipment) {
        this.equipment = equipment;
    }

    public String getTypeOfLicence() {
        return typeOfLicence;
    }

    public void setTypeOfLicence(String typeOfLicence) {
        this.typeOfLicence = typeOfLicence;
    }

    public String getDescriptionOfOutletLocation() {
        return descriptionOfOutletLocation;
    }

    public void setDescriptionOfOutletLocation(String descriptionOfOutletLocation) {
        this.descriptionOfOutletLocation = descriptionOfOutletLocation;
    }

    public Integer getNumberOfEmployees() {
        return numberOfEmployees;
    }

    public void setNumberOfEmployees(Integer numberOfEmployees) {
        this.numberOfEmployees = numberOfEmployees;
    }

    public Integer getNumberOfBranches() {
        return numberOfBranches;
    }

    public void setNumberOfBranches(Integer numberOfBranches) {
        this.numberOfBranches = numberOfBranches;
    }

    public Integer getNumberOfCustomersPerDay() {
        return numberOfCustomersPerDay;
    }

    public void setNumberOfCustomersPerDay(Integer numberOfCustomersPerDay) {
        this.numberOfCustomersPerDay = numberOfCustomersPerDay;
    }

    public String getNumberOfProducts() {
        return numberOfProducts;
    }

    public void setNumberOfProducts(String numberOfProducts) {
        this.numberOfProducts = numberOfProducts;
    }

    public Integer getRestockFrequency() {
        return restockFrequency;
    }

    public void setRestockFrequency(Integer restockFrequency) {
        this.restockFrequency = restockFrequency;
    }

    public String getTurnOver() {
        return turnOver;
    }

    public void setTurnOver(String turnOver) {
        this.turnOver = turnOver;
    }

    public Integer getTenureLengthYears() {
        return tenureLengthYears;
    }

    public void setTenureLengthYears(Integer tenureLengthYears) {
        this.tenureLengthYears = tenureLengthYears;
    }

    public Integer getTenureLengthMonths() {
        return tenureLengthMonths;
    }

    public void setTenureLengthMonths(Integer tenureLengthMonths) {
        this.tenureLengthMonths = tenureLengthMonths;
    }

    public java.util.Date getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(java.util.Date dateCreated) {
        this.dateCreated = dateCreated;
    }

    public java.util.Date getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(java.util.Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public long getVillageId() {
        return villageId;
    }

    public void setVillageId(long villageId) {
        this.villageId = villageId;
    }

    /** To-one relationship, resolved on first access. */
    public Village getVillage() {
        long __key = this.villageId;
        if (village__resolvedKey == null || !village__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VillageDao targetDao = daoSession.getVillageDao();
            Village villageNew = targetDao.load(__key);
            synchronized (this) {
                village = villageNew;
            	village__resolvedKey = __key;
            }
        }
        return village;
    }

    public void setVillage(Village village) {
        if (village == null) {
            throw new DaoException("To-one property 'villageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.village = village;
            villageId = village.getId();
            village__resolvedKey = villageId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomerContact> getCustomerContacts() {
        if (customerContacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerContactDao targetDao = daoSession.getCustomerContactDao();
            List<CustomerContact> customerContactsNew = targetDao._queryCustomer_CustomerContacts(id);
            synchronized (this) {
                if(customerContacts == null) {
                    customerContacts = customerContactsNew;
                }
            }
        }
        return customerContacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomerContacts() {
        customerContacts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Order> getOrders() {
        if (orders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDao targetDao = daoSession.getOrderDao();
            List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
            synchronized (this) {
                if(orders == null) {
                    orders = ordersNew;
                }
            }
        }
        return orders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrders() {
        orders = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getTasks() {
        if (tasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> tasksNew = targetDao._queryCustomer_Tasks(id);
            synchronized (this) {
                if(tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTasks() {
        tasks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
