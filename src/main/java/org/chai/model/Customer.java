package org.chai.model;

import java.util.List;
import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CUSTOMER.
 */
public class Customer {

    private Long id;
    /** Not-null value. */
    private String sysid;
    private Double latitude;
    private Double longitude;
    /** Not-null value. */
    private String outletName;
    private String outletType;
    private String outletSize;
    private byte[] outletPicture;
    /** Not-null value. */
    private String split;
    /** Not-null value. */
    private String openingHours;
    /** Not-null value. */
    private String majoritySourceOfSupply;
    /** Not-null value. */
    private String keyWholeSalerName;
    /** Not-null value. */
    private String keyWholeSalerContact;
    /** Not-null value. */
    private String buildingStructure;
    /** Not-null value. */
    private String equipment;
    /** Not-null value. */
    private String descriptionOfOutletLocation;
    private Integer numberOfEmployees;
    private Integer numberOfBranches;
    private Integer numberOfCustomersPerDay;
    private Integer numberOfProducts;
    private Integer restockFrequency;
    private Double turnOver;
    private Integer tenureLengthYears;
    private Integer tenureLengthMonths;
    private String parish;
    private String village;
    private long subcountyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CustomerDao myDao;

    private Subcounty subcounty;
    private Long subcounty__resolvedKey;

    private List<CustomerContact> contacts;
    private List<Order> orders;
    private List<Task> tasks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Customer() {
    }

    public Customer(Long id) {
        this.id = id;
    }

    public Customer(Long id, String sysid, Double latitude, Double longitude, String outletName, String outletType, String outletSize, byte[] outletPicture, String split, String openingHours, String majoritySourceOfSupply, String keyWholeSalerName, String keyWholeSalerContact, String buildingStructure, String equipment, String descriptionOfOutletLocation, Integer numberOfEmployees, Integer numberOfBranches, Integer numberOfCustomersPerDay, Integer numberOfProducts, Integer restockFrequency, Double turnOver, Integer tenureLengthYears, Integer tenureLengthMonths, String parish, String village, long subcountyId) {
        this.id = id;
        this.sysid = sysid;
        this.latitude = latitude;
        this.longitude = longitude;
        this.outletName = outletName;
        this.outletType = outletType;
        this.outletSize = outletSize;
        this.outletPicture = outletPicture;
        this.split = split;
        this.openingHours = openingHours;
        this.majoritySourceOfSupply = majoritySourceOfSupply;
        this.keyWholeSalerName = keyWholeSalerName;
        this.keyWholeSalerContact = keyWholeSalerContact;
        this.buildingStructure = buildingStructure;
        this.equipment = equipment;
        this.descriptionOfOutletLocation = descriptionOfOutletLocation;
        this.numberOfEmployees = numberOfEmployees;
        this.numberOfBranches = numberOfBranches;
        this.numberOfCustomersPerDay = numberOfCustomersPerDay;
        this.numberOfProducts = numberOfProducts;
        this.restockFrequency = restockFrequency;
        this.turnOver = turnOver;
        this.tenureLengthYears = tenureLengthYears;
        this.tenureLengthMonths = tenureLengthMonths;
        this.parish = parish;
        this.village = village;
        this.subcountyId = subcountyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSysid() {
        return sysid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSysid(String sysid) {
        this.sysid = sysid;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    /** Not-null value. */
    public String getOutletName() {
        return outletName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOutletName(String outletName) {
        this.outletName = outletName;
    }

    public String getOutletType() {
        return outletType;
    }

    public void setOutletType(String outletType) {
        this.outletType = outletType;
    }

    public String getOutletSize() {
        return outletSize;
    }

    public void setOutletSize(String outletSize) {
        this.outletSize = outletSize;
    }

    public byte[] getOutletPicture() {
        return outletPicture;
    }

    public void setOutletPicture(byte[] outletPicture) {
        this.outletPicture = outletPicture;
    }

    /** Not-null value. */
    public String getSplit() {
        return split;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSplit(String split) {
        this.split = split;
    }

    /** Not-null value. */
    public String getOpeningHours() {
        return openingHours;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOpeningHours(String openingHours) {
        this.openingHours = openingHours;
    }

    /** Not-null value. */
    public String getMajoritySourceOfSupply() {
        return majoritySourceOfSupply;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMajoritySourceOfSupply(String majoritySourceOfSupply) {
        this.majoritySourceOfSupply = majoritySourceOfSupply;
    }

    /** Not-null value. */
    public String getKeyWholeSalerName() {
        return keyWholeSalerName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setKeyWholeSalerName(String keyWholeSalerName) {
        this.keyWholeSalerName = keyWholeSalerName;
    }

    /** Not-null value. */
    public String getKeyWholeSalerContact() {
        return keyWholeSalerContact;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setKeyWholeSalerContact(String keyWholeSalerContact) {
        this.keyWholeSalerContact = keyWholeSalerContact;
    }

    /** Not-null value. */
    public String getBuildingStructure() {
        return buildingStructure;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBuildingStructure(String buildingStructure) {
        this.buildingStructure = buildingStructure;
    }

    /** Not-null value. */
    public String getEquipment() {
        return equipment;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEquipment(String equipment) {
        this.equipment = equipment;
    }

    /** Not-null value. */
    public String getDescriptionOfOutletLocation() {
        return descriptionOfOutletLocation;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescriptionOfOutletLocation(String descriptionOfOutletLocation) {
        this.descriptionOfOutletLocation = descriptionOfOutletLocation;
    }

    public Integer getNumberOfEmployees() {
        return numberOfEmployees;
    }

    public void setNumberOfEmployees(Integer numberOfEmployees) {
        this.numberOfEmployees = numberOfEmployees;
    }

    public Integer getNumberOfBranches() {
        return numberOfBranches;
    }

    public void setNumberOfBranches(Integer numberOfBranches) {
        this.numberOfBranches = numberOfBranches;
    }

    public Integer getNumberOfCustomersPerDay() {
        return numberOfCustomersPerDay;
    }

    public void setNumberOfCustomersPerDay(Integer numberOfCustomersPerDay) {
        this.numberOfCustomersPerDay = numberOfCustomersPerDay;
    }

    public Integer getNumberOfProducts() {
        return numberOfProducts;
    }

    public void setNumberOfProducts(Integer numberOfProducts) {
        this.numberOfProducts = numberOfProducts;
    }

    public Integer getRestockFrequency() {
        return restockFrequency;
    }

    public void setRestockFrequency(Integer restockFrequency) {
        this.restockFrequency = restockFrequency;
    }

    public Double getTurnOver() {
        return turnOver;
    }

    public void setTurnOver(Double turnOver) {
        this.turnOver = turnOver;
    }

    public Integer getTenureLengthYears() {
        return tenureLengthYears;
    }

    public void setTenureLengthYears(Integer tenureLengthYears) {
        this.tenureLengthYears = tenureLengthYears;
    }

    public Integer getTenureLengthMonths() {
        return tenureLengthMonths;
    }

    public void setTenureLengthMonths(Integer tenureLengthMonths) {
        this.tenureLengthMonths = tenureLengthMonths;
    }

    public String getParish() {
        return parish;
    }

    public void setParish(String parish) {
        this.parish = parish;
    }

    public String getVillage() {
        return village;
    }

    public void setVillage(String village) {
        this.village = village;
    }

    public long getSubcountyId() {
        return subcountyId;
    }

    public void setSubcountyId(long subcountyId) {
        this.subcountyId = subcountyId;
    }

    /** To-one relationship, resolved on first access. */
    public Subcounty getSubcounty() {
        long __key = this.subcountyId;
        if (subcounty__resolvedKey == null || !subcounty__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubcountyDao targetDao = daoSession.getSubcountyDao();
            Subcounty subcountyNew = targetDao.load(__key);
            synchronized (this) {
                subcounty = subcountyNew;
            	subcounty__resolvedKey = __key;
            }
        }
        return subcounty;
    }

    public void setSubcounty(Subcounty subcounty) {
        if (subcounty == null) {
            throw new DaoException("To-one property 'subcountyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.subcounty = subcounty;
            subcountyId = subcounty.getId();
            subcounty__resolvedKey = subcountyId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomerContact> getContacts() {
        if (contacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerContactDao targetDao = daoSession.getCustomerContactDao();
            List<CustomerContact> contactsNew = targetDao._queryCustomer_Contacts(id);
            synchronized (this) {
                if(contacts == null) {
                    contacts = contactsNew;
                }
            }
        }
        return contacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContacts() {
        contacts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Order> getOrders() {
        if (orders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDao targetDao = daoSession.getOrderDao();
            List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
            synchronized (this) {
                if(orders == null) {
                    orders = ordersNew;
                }
            }
        }
        return orders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrders() {
        orders = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getTasks() {
        if (tasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> tasksNew = targetDao._queryCustomer_Tasks(id);
            synchronized (this) {
                if(tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTasks() {
        tasks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
