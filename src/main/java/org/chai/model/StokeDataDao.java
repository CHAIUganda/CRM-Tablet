package org.chai.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.StokeData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STOKE_DATA.
*/
public class StokeDataDao extends AbstractDao<StokeData, String> {

    public static final String TABLENAME = "STOKE_DATA";

    /**
     * Properties of entity StokeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Quantity = new Property(1, int.class, "quantity", false, "QUANTITY");
        public final static Property SaleId = new Property(2, String.class, "saleId", false, "SALE_ID");
        public final static Property AdhockStockId = new Property(3, String.class, "adhockStockId", false, "ADHOCK_STOCK_ID");
        public final static Property ProductId = new Property(4, String.class, "productId", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<StokeData> sale_StockDatasQuery;
    private Query<StokeData> adhockSale_AdhockStockDatasQuery;
    private Query<StokeData> product_StockDatasQuery;

    public StokeDataDao(DaoConfig config) {
        super(config);
    }
    
    public StokeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STOKE_DATA' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'QUANTITY' INTEGER NOT NULL ," + // 1: quantity
                "'SALE_ID' TEXT," + // 2: saleId
                "'ADHOCK_STOCK_ID' TEXT," + // 3: adhockStockId
                "'PRODUCT_ID' TEXT NOT NULL );"); // 4: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STOKE_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StokeData entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindLong(2, entity.getQuantity());
 
        String saleId = entity.getSaleId();
        if (saleId != null) {
            stmt.bindString(3, saleId);
        }
 
        String adhockStockId = entity.getAdhockStockId();
        if (adhockStockId != null) {
            stmt.bindString(4, adhockStockId);
        }
        stmt.bindString(5, entity.getProductId());
    }

    @Override
    protected void attachEntity(StokeData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StokeData readEntity(Cursor cursor, int offset) {
        StokeData entity = new StokeData( //
            cursor.getString(offset + 0), // uuid
            cursor.getInt(offset + 1), // quantity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // saleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adhockStockId
            cursor.getString(offset + 4) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StokeData entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setQuantity(cursor.getInt(offset + 1));
        entity.setSaleId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdhockStockId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductId(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StokeData entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StokeData entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stockDatas" to-many relationship of Sale. */
    public List<StokeData> _querySale_StockDatas(String saleId) {
        synchronized (this) {
            if (sale_StockDatasQuery == null) {
                QueryBuilder<StokeData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SaleId.eq(null));
                sale_StockDatasQuery = queryBuilder.build();
            }
        }
        Query<StokeData> query = sale_StockDatasQuery.forCurrentThread();
        query.setParameter(0, saleId);
        return query.list();
    }

    /** Internal query to resolve the "adhockStockDatas" to-many relationship of AdhockSale. */
    public List<StokeData> _queryAdhockSale_AdhockStockDatas(String adhockStockId) {
        synchronized (this) {
            if (adhockSale_AdhockStockDatasQuery == null) {
                QueryBuilder<StokeData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AdhockStockId.eq(null));
                adhockSale_AdhockStockDatasQuery = queryBuilder.build();
            }
        }
        Query<StokeData> query = adhockSale_AdhockStockDatasQuery.forCurrentThread();
        query.setParameter(0, adhockStockId);
        return query.list();
    }

    /** Internal query to resolve the "stockDatas" to-many relationship of Product. */
    public List<StokeData> _queryProduct_StockDatas(String productId) {
        synchronized (this) {
            if (product_StockDatasQuery == null) {
                QueryBuilder<StokeData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                product_StockDatasQuery = queryBuilder.build();
            }
        }
        Query<StokeData> query = product_StockDatasQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSaleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProductDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getAdhockSaleDao().getAllColumns());
            builder.append(" FROM STOKE_DATA T");
            builder.append(" LEFT JOIN SALE T0 ON T.'SALE_ID'=T0.'UUID'");
            builder.append(" LEFT JOIN PRODUCT T1 ON T.'PRODUCT_ID'=T1.'UUID'");
            builder.append(" LEFT JOIN ADHOCK_SALE T2 ON T.'ADHOCK_STOCK_ID'=T2.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StokeData loadCurrentDeep(Cursor cursor, boolean lock) {
        StokeData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sale sale = loadCurrentOther(daoSession.getSaleDao(), cursor, offset);
        entity.setSale(sale);
        offset += daoSession.getSaleDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }
        offset += daoSession.getProductDao().getAllColumns().length;

        AdhockSale adhockSale = loadCurrentOther(daoSession.getAdhockSaleDao(), cursor, offset);
        entity.setAdhockSale(adhockSale);

        return entity;    
    }

    public StokeData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StokeData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StokeData> list = new ArrayList<StokeData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StokeData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StokeData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
