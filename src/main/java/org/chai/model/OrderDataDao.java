package org.chai.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.OrderData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_DATA.
*/
public class OrderDataDao extends AbstractDao<OrderData, Long> {

    public static final String TABLENAME = "ORDER_DATA";

    /**
     * Properties of entity OrderData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Quantity = new Property(2, int.class, "quantity", false, "QUANTITY");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property ProductId = new Property(4, String.class, "productId", false, "PRODUCT_ID");
        public final static Property OrderId = new Property(5, long.class, "orderId", false, "ORDER_ID");
        public final static Property ProductRefId = new Property(6, long.class, "productRefId", false, "PRODUCT_REF_ID");
    };

    private DaoSession daoSession;

    private Query<OrderData> order_OrderDatasQuery;
    private Query<OrderData> product_OrderDatasQuery;

    public OrderDataDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UUID' TEXT NOT NULL UNIQUE ," + // 1: uuid
                "'QUANTITY' INTEGER NOT NULL ," + // 2: quantity
                "'PRICE' INTEGER NOT NULL ," + // 3: price
                "'PRODUCT_ID' TEXT," + // 4: productId
                "'ORDER_ID' INTEGER NOT NULL ," + // 5: orderId
                "'PRODUCT_REF_ID' INTEGER NOT NULL );"); // 6: productRefId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUuid());
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindLong(4, entity.getPrice());
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(5, productId);
        }
        stmt.bindLong(6, entity.getOrderId());
        stmt.bindLong(7, entity.getProductRefId());
    }

    @Override
    protected void attachEntity(OrderData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderData readEntity(Cursor cursor, int offset) {
        OrderData entity = new OrderData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uuid
            cursor.getInt(offset + 2), // quantity
            cursor.getInt(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productId
            cursor.getLong(offset + 5), // orderId
            cursor.getLong(offset + 6) // productRefId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.getString(offset + 1));
        entity.setQuantity(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setProductId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderId(cursor.getLong(offset + 5));
        entity.setProductRefId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderDatas" to-many relationship of Order. */
    public List<OrderData> _queryOrder_OrderDatas(long orderId) {
        synchronized (this) {
            if (order_OrderDatasQuery == null) {
                QueryBuilder<OrderData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                order_OrderDatasQuery = queryBuilder.build();
            }
        }
        Query<OrderData> query = order_OrderDatasQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

    /** Internal query to resolve the "orderDatas" to-many relationship of Product. */
    public List<OrderData> _queryProduct_OrderDatas(long productRefId) {
        synchronized (this) {
            if (product_OrderDatasQuery == null) {
                QueryBuilder<OrderData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductRefId.eq(null));
                product_OrderDatasQuery = queryBuilder.build();
            }
        }
        Query<OrderData> query = product_OrderDatasQuery.forCurrentThread();
        query.setParameter(0, productRefId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrderDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM ORDER_DATA T");
            builder.append(" LEFT JOIN orders T0 ON T.'ORDER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PRODUCT T1 ON T.'PRODUCT_REF_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrderData loadCurrentDeep(Cursor cursor, boolean lock) {
        OrderData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Order order = loadCurrentOther(daoSession.getOrderDao(), cursor, offset);
         if(order != null) {
            entity.setOrder(order);
        }
        offset += daoSession.getOrderDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }

        return entity;    
    }

    public OrderData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrderData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrderData> list = new ArrayList<OrderData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrderData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrderData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
