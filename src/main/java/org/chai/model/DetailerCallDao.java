package org.chai.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.DetailerCall;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DETAILER_CALL.
*/
public class DetailerCallDao extends AbstractDao<DetailerCall, String> {

    public static final String TABLENAME = "DETAILER_CALL";

    /**
     * Properties of entity DetailerCall.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property DateOfSurvey = new Property(1, java.util.Date.class, "dateOfSurvey", false, "DATE_OF_SURVEY");
        public final static Property DiarrheaPatientsInFacility = new Property(2, Integer.class, "diarrheaPatientsInFacility", false, "DIARRHEA_PATIENTS_IN_FACILITY");
        public final static Property HeardAboutDiarrheaTreatmentInChildren = new Property(3, String.class, "heardAboutDiarrheaTreatmentInChildren", false, "HEARD_ABOUT_DIARRHEA_TREATMENT_IN_CHILDREN");
        public final static Property HowDidYouHear = new Property(4, String.class, "howDidYouHear", false, "HOW_DID_YOU_HEAR");
        public final static Property OtherWaysHowYouHeard = new Property(5, String.class, "otherWaysHowYouHeard", false, "OTHER_WAYS_HOW_YOU_HEARD");
        public final static Property WhatYouKnowAbtDiarrhea = new Property(6, String.class, "whatYouKnowAbtDiarrhea", false, "WHAT_YOU_KNOW_ABT_DIARRHEA");
        public final static Property DiarrheaEffectsOnBody = new Property(7, String.class, "diarrheaEffectsOnBody", false, "DIARRHEA_EFFECTS_ON_BODY");
        public final static Property KnowledgeAbtOrsAndUsage = new Property(8, String.class, "knowledgeAbtOrsAndUsage", false, "KNOWLEDGE_ABT_ORS_AND_USAGE");
        public final static Property KnowledgeAbtZincAndUsage = new Property(9, String.class, "knowledgeAbtZincAndUsage", false, "KNOWLEDGE_ABT_ZINC_AND_USAGE");
        public final static Property WhyNotUseAntibiotics = new Property(10, String.class, "whyNotUseAntibiotics", false, "WHY_NOT_USE_ANTIBIOTICS");
        public final static Property DoYouStockOrsZinc = new Property(11, Boolean.class, "doYouStockOrsZinc", false, "DO_YOU_STOCK_ORS_ZINC");
        public final static Property HowManyZincInStock = new Property(12, Integer.class, "howManyZincInStock", false, "HOW_MANY_ZINC_IN_STOCK");
        public final static Property HowmanyOrsInStock = new Property(13, Integer.class, "howmanyOrsInStock", false, "HOWMANY_ORS_IN_STOCK");
        public final static Property ZincBrandsold = new Property(14, String.class, "zincBrandsold", false, "ZINC_BRANDSOLD");
        public final static Property OrsBrandSold = new Property(15, String.class, "orsBrandSold", false, "ORS_BRAND_SOLD");
        public final static Property IfNoWhy = new Property(16, String.class, "ifNoWhy", false, "IF_NO_WHY");
        public final static Property ZincPrice = new Property(17, Double.class, "zincPrice", false, "ZINC_PRICE");
        public final static Property OrsPrice = new Property(18, Double.class, "orsPrice", false, "ORS_PRICE");
        public final static Property BuyingPriceZinc = new Property(19, Double.class, "buyingPriceZinc", false, "BUYING_PRICE_ZINC");
        public final static Property BuyingPriceOrs = new Property(20, Double.class, "buyingPriceOrs", false, "BUYING_PRICE_ORS");
        public final static Property PointOfsaleMaterial = new Property(21, String.class, "pointOfsaleMaterial", false, "POINT_OFSALE_MATERIAL");
        public final static Property RecommendationNextStep = new Property(22, String.class, "recommendationNextStep", false, "RECOMMENDATION_NEXT_STEP");
        public final static Property RecommendationLevel = new Property(23, String.class, "recommendationLevel", false, "RECOMMENDATION_LEVEL");
        public final static Property TenureLength = new Property(24, Integer.class, "tenureLength", false, "TENURE_LENGTH");
        public final static Property Latitude = new Property(25, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(26, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsNew = new Property(27, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property TaskId = new Property(28, String.class, "taskId", false, "TASK_ID");
    };

    private DaoSession daoSession;

    private Query<DetailerCall> task_DetailersQuery;

    public DetailerCallDao(DaoConfig config) {
        super(config);
    }
    
    public DetailerCallDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETAILER_CALL' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'DATE_OF_SURVEY' INTEGER," + // 1: dateOfSurvey
                "'DIARRHEA_PATIENTS_IN_FACILITY' INTEGER," + // 2: diarrheaPatientsInFacility
                "'HEARD_ABOUT_DIARRHEA_TREATMENT_IN_CHILDREN' TEXT," + // 3: heardAboutDiarrheaTreatmentInChildren
                "'HOW_DID_YOU_HEAR' TEXT," + // 4: howDidYouHear
                "'OTHER_WAYS_HOW_YOU_HEARD' TEXT," + // 5: otherWaysHowYouHeard
                "'WHAT_YOU_KNOW_ABT_DIARRHEA' TEXT," + // 6: whatYouKnowAbtDiarrhea
                "'DIARRHEA_EFFECTS_ON_BODY' TEXT," + // 7: diarrheaEffectsOnBody
                "'KNOWLEDGE_ABT_ORS_AND_USAGE' TEXT," + // 8: knowledgeAbtOrsAndUsage
                "'KNOWLEDGE_ABT_ZINC_AND_USAGE' TEXT," + // 9: knowledgeAbtZincAndUsage
                "'WHY_NOT_USE_ANTIBIOTICS' TEXT," + // 10: whyNotUseAntibiotics
                "'DO_YOU_STOCK_ORS_ZINC' INTEGER," + // 11: doYouStockOrsZinc
                "'HOW_MANY_ZINC_IN_STOCK' INTEGER," + // 12: howManyZincInStock
                "'HOWMANY_ORS_IN_STOCK' INTEGER," + // 13: howmanyOrsInStock
                "'ZINC_BRANDSOLD' TEXT," + // 14: zincBrandsold
                "'ORS_BRAND_SOLD' TEXT," + // 15: orsBrandSold
                "'IF_NO_WHY' TEXT," + // 16: ifNoWhy
                "'ZINC_PRICE' REAL," + // 17: zincPrice
                "'ORS_PRICE' REAL," + // 18: orsPrice
                "'BUYING_PRICE_ZINC' REAL," + // 19: buyingPriceZinc
                "'BUYING_PRICE_ORS' REAL," + // 20: buyingPriceOrs
                "'POINT_OFSALE_MATERIAL' TEXT," + // 21: pointOfsaleMaterial
                "'RECOMMENDATION_NEXT_STEP' TEXT," + // 22: recommendationNextStep
                "'RECOMMENDATION_LEVEL' TEXT," + // 23: recommendationLevel
                "'TENURE_LENGTH' INTEGER," + // 24: tenureLength
                "'LATITUDE' REAL," + // 25: latitude
                "'LONGITUDE' REAL," + // 26: longitude
                "'IS_NEW' INTEGER," + // 27: isNew
                "'TASK_ID' TEXT NOT NULL );"); // 28: taskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETAILER_CALL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetailerCall entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        java.util.Date dateOfSurvey = entity.getDateOfSurvey();
        if (dateOfSurvey != null) {
            stmt.bindLong(2, dateOfSurvey.getTime());
        }
 
        Integer diarrheaPatientsInFacility = entity.getDiarrheaPatientsInFacility();
        if (diarrheaPatientsInFacility != null) {
            stmt.bindLong(3, diarrheaPatientsInFacility);
        }
 
        String heardAboutDiarrheaTreatmentInChildren = entity.getHeardAboutDiarrheaTreatmentInChildren();
        if (heardAboutDiarrheaTreatmentInChildren != null) {
            stmt.bindString(4, heardAboutDiarrheaTreatmentInChildren);
        }
 
        String howDidYouHear = entity.getHowDidYouHear();
        if (howDidYouHear != null) {
            stmt.bindString(5, howDidYouHear);
        }
 
        String otherWaysHowYouHeard = entity.getOtherWaysHowYouHeard();
        if (otherWaysHowYouHeard != null) {
            stmt.bindString(6, otherWaysHowYouHeard);
        }
 
        String whatYouKnowAbtDiarrhea = entity.getWhatYouKnowAbtDiarrhea();
        if (whatYouKnowAbtDiarrhea != null) {
            stmt.bindString(7, whatYouKnowAbtDiarrhea);
        }
 
        String diarrheaEffectsOnBody = entity.getDiarrheaEffectsOnBody();
        if (diarrheaEffectsOnBody != null) {
            stmt.bindString(8, diarrheaEffectsOnBody);
        }
 
        String knowledgeAbtOrsAndUsage = entity.getKnowledgeAbtOrsAndUsage();
        if (knowledgeAbtOrsAndUsage != null) {
            stmt.bindString(9, knowledgeAbtOrsAndUsage);
        }
 
        String knowledgeAbtZincAndUsage = entity.getKnowledgeAbtZincAndUsage();
        if (knowledgeAbtZincAndUsage != null) {
            stmt.bindString(10, knowledgeAbtZincAndUsage);
        }
 
        String whyNotUseAntibiotics = entity.getWhyNotUseAntibiotics();
        if (whyNotUseAntibiotics != null) {
            stmt.bindString(11, whyNotUseAntibiotics);
        }
 
        Boolean doYouStockOrsZinc = entity.getDoYouStockOrsZinc();
        if (doYouStockOrsZinc != null) {
            stmt.bindLong(12, doYouStockOrsZinc ? 1l: 0l);
        }
 
        Integer howManyZincInStock = entity.getHowManyZincInStock();
        if (howManyZincInStock != null) {
            stmt.bindLong(13, howManyZincInStock);
        }
 
        Integer howmanyOrsInStock = entity.getHowmanyOrsInStock();
        if (howmanyOrsInStock != null) {
            stmt.bindLong(14, howmanyOrsInStock);
        }
 
        String zincBrandsold = entity.getZincBrandsold();
        if (zincBrandsold != null) {
            stmt.bindString(15, zincBrandsold);
        }
 
        String orsBrandSold = entity.getOrsBrandSold();
        if (orsBrandSold != null) {
            stmt.bindString(16, orsBrandSold);
        }
 
        String ifNoWhy = entity.getIfNoWhy();
        if (ifNoWhy != null) {
            stmt.bindString(17, ifNoWhy);
        }
 
        Double zincPrice = entity.getZincPrice();
        if (zincPrice != null) {
            stmt.bindDouble(18, zincPrice);
        }
 
        Double orsPrice = entity.getOrsPrice();
        if (orsPrice != null) {
            stmt.bindDouble(19, orsPrice);
        }
 
        Double buyingPriceZinc = entity.getBuyingPriceZinc();
        if (buyingPriceZinc != null) {
            stmt.bindDouble(20, buyingPriceZinc);
        }
 
        Double buyingPriceOrs = entity.getBuyingPriceOrs();
        if (buyingPriceOrs != null) {
            stmt.bindDouble(21, buyingPriceOrs);
        }
 
        String pointOfsaleMaterial = entity.getPointOfsaleMaterial();
        if (pointOfsaleMaterial != null) {
            stmt.bindString(22, pointOfsaleMaterial);
        }
 
        String recommendationNextStep = entity.getRecommendationNextStep();
        if (recommendationNextStep != null) {
            stmt.bindString(23, recommendationNextStep);
        }
 
        String recommendationLevel = entity.getRecommendationLevel();
        if (recommendationLevel != null) {
            stmt.bindString(24, recommendationLevel);
        }
 
        Integer tenureLength = entity.getTenureLength();
        if (tenureLength != null) {
            stmt.bindLong(25, tenureLength);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(26, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(27, longitude);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(28, isNew ? 1l: 0l);
        }
        stmt.bindString(29, entity.getTaskId());
    }

    @Override
    protected void attachEntity(DetailerCall entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DetailerCall readEntity(Cursor cursor, int offset) {
        DetailerCall entity = new DetailerCall( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // dateOfSurvey
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // diarrheaPatientsInFacility
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // heardAboutDiarrheaTreatmentInChildren
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // howDidYouHear
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // otherWaysHowYouHeard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // whatYouKnowAbtDiarrhea
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // diarrheaEffectsOnBody
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // knowledgeAbtOrsAndUsage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // knowledgeAbtZincAndUsage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // whyNotUseAntibiotics
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // doYouStockOrsZinc
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // howManyZincInStock
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // howmanyOrsInStock
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // zincBrandsold
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // orsBrandSold
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ifNoWhy
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // zincPrice
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // orsPrice
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // buyingPriceZinc
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // buyingPriceOrs
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // pointOfsaleMaterial
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // recommendationNextStep
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // recommendationLevel
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // tenureLength
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // latitude
            cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26), // longitude
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // isNew
            cursor.getString(offset + 28) // taskId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetailerCall entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDateOfSurvey(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDiarrheaPatientsInFacility(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHeardAboutDiarrheaTreatmentInChildren(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHowDidYouHear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOtherWaysHowYouHeard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWhatYouKnowAbtDiarrhea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDiarrheaEffectsOnBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKnowledgeAbtOrsAndUsage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKnowledgeAbtZincAndUsage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWhyNotUseAntibiotics(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDoYouStockOrsZinc(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setHowManyZincInStock(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setHowmanyOrsInStock(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setZincBrandsold(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrsBrandSold(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIfNoWhy(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setZincPrice(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setOrsPrice(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setBuyingPriceZinc(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setBuyingPriceOrs(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setPointOfsaleMaterial(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRecommendationNextStep(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRecommendationLevel(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTenureLength(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setLatitude(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setLongitude(cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26));
        entity.setIsNew(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setTaskId(cursor.getString(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DetailerCall entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DetailerCall entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detailers" to-many relationship of Task. */
    public List<DetailerCall> _queryTask_Detailers(String taskId) {
        synchronized (this) {
            if (task_DetailersQuery == null) {
                QueryBuilder<DetailerCall> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_DetailersQuery = queryBuilder.build();
            }
        }
        Query<DetailerCall> query = task_DetailersQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskDao().getAllColumns());
            builder.append(" FROM DETAILER_CALL T");
            builder.append(" LEFT JOIN TASK T0 ON T.'TASK_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DetailerCall loadCurrentDeep(Cursor cursor, boolean lock) {
        DetailerCall entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Task task = loadCurrentOther(daoSession.getTaskDao(), cursor, offset);
         if(task != null) {
            entity.setTask(task);
        }

        return entity;    
    }

    public DetailerCall loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DetailerCall> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DetailerCall> list = new ArrayList<DetailerCall>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DetailerCall> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DetailerCall> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
