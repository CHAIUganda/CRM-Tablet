package org.chai.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROMOTION.
*/
public class PromotionDao extends AbstractDao<Promotion, String> {

    public static final String TABLENAME = "PROMOTION";

    /**
     * Properties of entity Promotion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property StopDate = new Property(3, java.util.Date.class, "stopDate", false, "STOP_DATE");
        public final static Property ProductId = new Property(4, String.class, "productId", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<Promotion> product_PromotionsQuery;

    public PromotionDao(DaoConfig config) {
        super(config);
    }
    
    public PromotionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROMOTION' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'DESCRIPTION' TEXT NOT NULL ," + // 1: description
                "'START_DATE' INTEGER NOT NULL ," + // 2: startDate
                "'STOP_DATE' INTEGER NOT NULL ," + // 3: stopDate
                "'PRODUCT_ID' TEXT NOT NULL );"); // 4: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROMOTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Promotion entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindString(2, entity.getDescription());
        stmt.bindLong(3, entity.getStartDate().getTime());
        stmt.bindLong(4, entity.getStopDate().getTime());
        stmt.bindString(5, entity.getProductId());
    }

    @Override
    protected void attachEntity(Promotion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Promotion readEntity(Cursor cursor, int offset) {
        Promotion entity = new Promotion( //
            cursor.getString(offset + 0), // uuid
            cursor.getString(offset + 1), // description
            new java.util.Date(cursor.getLong(offset + 2)), // startDate
            new java.util.Date(cursor.getLong(offset + 3)), // stopDate
            cursor.getString(offset + 4) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Promotion entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDescription(cursor.getString(offset + 1));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setStopDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setProductId(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Promotion entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Promotion entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "promotions" to-many relationship of Product. */
    public List<Promotion> _queryProduct_Promotions(String productId) {
        synchronized (this) {
            if (product_PromotionsQuery == null) {
                QueryBuilder<Promotion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                product_PromotionsQuery = queryBuilder.build();
            }
        }
        Query<Promotion> query = product_PromotionsQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM PROMOTION T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.'PRODUCT_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Promotion loadCurrentDeep(Cursor cursor, boolean lock) {
        Promotion entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }

        return entity;    
    }

    public Promotion loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Promotion> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Promotion> list = new ArrayList<Promotion>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Promotion> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Promotion> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
