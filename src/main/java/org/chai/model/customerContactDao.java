package org.chai.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.customerContact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER_CONTACT.
*/
public class customerContactDao extends AbstractDao<customerContact, Long> {

    public static final String TABLENAME = "CUSTOMER_CONTACT";

    /**
     * Properties of entity customerContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Contact = new Property(2, String.class, "contact", false, "CONTACT");
        public final static Property TypeOfContact = new Property(3, String.class, "typeOfContact", false, "TYPE_OF_CONTACT");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Role = new Property(5, String.class, "role", false, "ROLE");
        public final static Property Qualification = new Property(6, String.class, "qualification", false, "QUALIFICATION");
        public final static Property NetworkOrAssociation = new Property(7, String.class, "networkOrAssociation", false, "NETWORK_OR_ASSOCIATION");
        public final static Property GraduationYear = new Property(8, Integer.class, "graduationYear", false, "GRADUATION_YEAR");
        public final static Property CustomerId = new Property(9, long.class, "customerId", false, "CUSTOMER_ID");
    };

    private DaoSession daoSession;

    private Query<customerContact> customer_ContactsQuery;

    public customerContactDao(DaoConfig config) {
        super(config);
    }
    
    public customerContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER_CONTACT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'CONTACT' TEXT NOT NULL ," + // 2: contact
                "'TYPE_OF_CONTACT' TEXT NOT NULL ," + // 3: typeOfContact
                "'GENDER' TEXT NOT NULL ," + // 4: gender
                "'ROLE' TEXT NOT NULL ," + // 5: role
                "'QUALIFICATION' TEXT NOT NULL ," + // 6: qualification
                "'NETWORK_OR_ASSOCIATION' TEXT," + // 7: networkOrAssociation
                "'GRADUATION_YEAR' INTEGER," + // 8: graduationYear
                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 9: customerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER_CONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, customerContact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getContact());
        stmt.bindString(4, entity.getTypeOfContact());
        stmt.bindString(5, entity.getGender());
        stmt.bindString(6, entity.getRole());
        stmt.bindString(7, entity.getQualification());
 
        String networkOrAssociation = entity.getNetworkOrAssociation();
        if (networkOrAssociation != null) {
            stmt.bindString(8, networkOrAssociation);
        }
 
        Integer graduationYear = entity.getGraduationYear();
        if (graduationYear != null) {
            stmt.bindLong(9, graduationYear);
        }
        stmt.bindLong(10, entity.getCustomerId());
    }

    @Override
    protected void attachEntity(customerContact entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public customerContact readEntity(Cursor cursor, int offset) {
        customerContact entity = new customerContact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // contact
            cursor.getString(offset + 3), // typeOfContact
            cursor.getString(offset + 4), // gender
            cursor.getString(offset + 5), // role
            cursor.getString(offset + 6), // qualification
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // networkOrAssociation
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // graduationYear
            cursor.getLong(offset + 9) // customerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, customerContact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setContact(cursor.getString(offset + 2));
        entity.setTypeOfContact(cursor.getString(offset + 3));
        entity.setGender(cursor.getString(offset + 4));
        entity.setRole(cursor.getString(offset + 5));
        entity.setQualification(cursor.getString(offset + 6));
        entity.setNetworkOrAssociation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGraduationYear(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCustomerId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(customerContact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(customerContact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "contacts" to-many relationship of customer. */
    public List<customerContact> _queryCustomer_Contacts(long customerId) {
        synchronized (this) {
            if (customer_ContactsQuery == null) {
                QueryBuilder<customerContact> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                customer_ContactsQuery = queryBuilder.build();
            }
        }
        Query<customerContact> query = customer_ContactsQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

}
