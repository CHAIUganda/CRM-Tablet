package org.chai.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER.
*/
public class CustomerDao extends AbstractDao<Customer, String> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property OutletName = new Property(3, String.class, "outletName", false, "OUTLET_NAME");
        public final static Property OutletType = new Property(4, String.class, "outletType", false, "OUTLET_TYPE");
        public final static Property OutletSize = new Property(5, String.class, "outletSize", false, "OUTLET_SIZE");
        public final static Property OutletPicture = new Property(6, byte[].class, "outletPicture", false, "OUTLET_PICTURE");
        public final static Property Split = new Property(7, String.class, "split", false, "SPLIT");
        public final static Property MajoritySourceOfSupply = new Property(8, String.class, "majoritySourceOfSupply", false, "MAJORITY_SOURCE_OF_SUPPLY");
        public final static Property KeyWholeSalerName = new Property(9, String.class, "keyWholeSalerName", false, "KEY_WHOLE_SALER_NAME");
        public final static Property KeyWholeSalerContact = new Property(10, String.class, "keyWholeSalerContact", false, "KEY_WHOLE_SALER_CONTACT");
        public final static Property BuildingStructure = new Property(11, String.class, "buildingStructure", false, "BUILDING_STRUCTURE");
        public final static Property TypeOfLicence = new Property(12, String.class, "typeOfLicence", false, "TYPE_OF_LICENCE");
        public final static Property DescriptionOfOutletLocation = new Property(13, String.class, "descriptionOfOutletLocation", false, "DESCRIPTION_OF_OUTLET_LOCATION");
        public final static Property NumberOfEmployees = new Property(14, Integer.class, "numberOfEmployees", false, "NUMBER_OF_EMPLOYEES");
        public final static Property HasSisterBranch = new Property(15, Boolean.class, "hasSisterBranch", false, "HAS_SISTER_BRANCH");
        public final static Property NumberOfCustomersPerDay = new Property(16, Integer.class, "numberOfCustomersPerDay", false, "NUMBER_OF_CUSTOMERS_PER_DAY");
        public final static Property RestockFrequency = new Property(17, String.class, "restockFrequency", false, "RESTOCK_FREQUENCY");
        public final static Property DateOutletOpened = new Property(18, java.util.Date.class, "dateOutletOpened", false, "DATE_OUTLET_OPENED");
        public final static Property DateCreated = new Property(19, java.util.Date.class, "dateCreated", false, "DATE_CREATED");
        public final static Property LastUpdated = new Property(20, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
        public final static Property IsDirty = new Property(21, Boolean.class, "isDirty", false, "IS_DIRTY");
        public final static Property TradingCenter = new Property(22, String.class, "tradingCenter", false, "TRADING_CENTER");
        public final static Property SubcountyUuid = new Property(23, String.class, "subcountyUuid", false, "SUBCOUNTY_UUID");
        public final static Property SubcountyId = new Property(24, String.class, "subcountyId", false, "SUBCOUNTY_ID");
    };

    private DaoSession daoSession;

    private Query<Customer> subcounty_CustomersQuery;

    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'LATITUDE' REAL," + // 1: latitude
                "'LONGITUDE' REAL," + // 2: longitude
                "'OUTLET_NAME' TEXT NOT NULL ," + // 3: outletName
                "'OUTLET_TYPE' TEXT," + // 4: outletType
                "'OUTLET_SIZE' TEXT," + // 5: outletSize
                "'OUTLET_PICTURE' BLOB," + // 6: outletPicture
                "'SPLIT' TEXT," + // 7: split
                "'MAJORITY_SOURCE_OF_SUPPLY' TEXT," + // 8: majoritySourceOfSupply
                "'KEY_WHOLE_SALER_NAME' TEXT," + // 9: keyWholeSalerName
                "'KEY_WHOLE_SALER_CONTACT' TEXT," + // 10: keyWholeSalerContact
                "'BUILDING_STRUCTURE' TEXT," + // 11: buildingStructure
                "'TYPE_OF_LICENCE' TEXT," + // 12: typeOfLicence
                "'DESCRIPTION_OF_OUTLET_LOCATION' TEXT," + // 13: descriptionOfOutletLocation
                "'NUMBER_OF_EMPLOYEES' INTEGER," + // 14: numberOfEmployees
                "'HAS_SISTER_BRANCH' INTEGER," + // 15: hasSisterBranch
                "'NUMBER_OF_CUSTOMERS_PER_DAY' INTEGER," + // 16: numberOfCustomersPerDay
                "'RESTOCK_FREQUENCY' TEXT," + // 17: restockFrequency
                "'DATE_OUTLET_OPENED' INTEGER," + // 18: dateOutletOpened
                "'DATE_CREATED' INTEGER," + // 19: dateCreated
                "'LAST_UPDATED' INTEGER," + // 20: lastUpdated
                "'IS_DIRTY' INTEGER," + // 21: isDirty
                "'TRADING_CENTER' TEXT," + // 22: tradingCenter
                "'SUBCOUNTY_UUID' TEXT," + // 23: subcountyUuid
                "'SUBCOUNTY_ID' TEXT NOT NULL );"); // 24: subcountyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
        stmt.bindString(4, entity.getOutletName());
 
        String outletType = entity.getOutletType();
        if (outletType != null) {
            stmt.bindString(5, outletType);
        }
 
        String outletSize = entity.getOutletSize();
        if (outletSize != null) {
            stmt.bindString(6, outletSize);
        }
 
        byte[] outletPicture = entity.getOutletPicture();
        if (outletPicture != null) {
            stmt.bindBlob(7, outletPicture);
        }
 
        String split = entity.getSplit();
        if (split != null) {
            stmt.bindString(8, split);
        }
 
        String majoritySourceOfSupply = entity.getMajoritySourceOfSupply();
        if (majoritySourceOfSupply != null) {
            stmt.bindString(9, majoritySourceOfSupply);
        }
 
        String keyWholeSalerName = entity.getKeyWholeSalerName();
        if (keyWholeSalerName != null) {
            stmt.bindString(10, keyWholeSalerName);
        }
 
        String keyWholeSalerContact = entity.getKeyWholeSalerContact();
        if (keyWholeSalerContact != null) {
            stmt.bindString(11, keyWholeSalerContact);
        }
 
        String buildingStructure = entity.getBuildingStructure();
        if (buildingStructure != null) {
            stmt.bindString(12, buildingStructure);
        }
 
        String typeOfLicence = entity.getTypeOfLicence();
        if (typeOfLicence != null) {
            stmt.bindString(13, typeOfLicence);
        }
 
        String descriptionOfOutletLocation = entity.getDescriptionOfOutletLocation();
        if (descriptionOfOutletLocation != null) {
            stmt.bindString(14, descriptionOfOutletLocation);
        }
 
        Integer numberOfEmployees = entity.getNumberOfEmployees();
        if (numberOfEmployees != null) {
            stmt.bindLong(15, numberOfEmployees);
        }
 
        Boolean hasSisterBranch = entity.getHasSisterBranch();
        if (hasSisterBranch != null) {
            stmt.bindLong(16, hasSisterBranch ? 1l: 0l);
        }
 
        Integer numberOfCustomersPerDay = entity.getNumberOfCustomersPerDay();
        if (numberOfCustomersPerDay != null) {
            stmt.bindLong(17, numberOfCustomersPerDay);
        }
 
        String restockFrequency = entity.getRestockFrequency();
        if (restockFrequency != null) {
            stmt.bindString(18, restockFrequency);
        }
 
        java.util.Date dateOutletOpened = entity.getDateOutletOpened();
        if (dateOutletOpened != null) {
            stmt.bindLong(19, dateOutletOpened.getTime());
        }
 
        java.util.Date dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(20, dateCreated.getTime());
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(21, lastUpdated.getTime());
        }
 
        Boolean isDirty = entity.getIsDirty();
        if (isDirty != null) {
            stmt.bindLong(22, isDirty ? 1l: 0l);
        }
 
        String tradingCenter = entity.getTradingCenter();
        if (tradingCenter != null) {
            stmt.bindString(23, tradingCenter);
        }
 
        String subcountyUuid = entity.getSubcountyUuid();
        if (subcountyUuid != null) {
            stmt.bindString(24, subcountyUuid);
        }
        stmt.bindString(25, entity.getSubcountyId());
    }

    @Override
    protected void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitude
            cursor.getString(offset + 3), // outletName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outletType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outletSize
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // outletPicture
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // split
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // majoritySourceOfSupply
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // keyWholeSalerName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // keyWholeSalerContact
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // buildingStructure
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // typeOfLicence
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // descriptionOfOutletLocation
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // numberOfEmployees
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // hasSisterBranch
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // numberOfCustomersPerDay
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // restockFrequency
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // dateOutletOpened
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // dateCreated
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // lastUpdated
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isDirty
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tradingCenter
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // subcountyUuid
            cursor.getString(offset + 24) // subcountyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setOutletName(cursor.getString(offset + 3));
        entity.setOutletType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutletSize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutletPicture(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setSplit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMajoritySourceOfSupply(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKeyWholeSalerName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKeyWholeSalerContact(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBuildingStructure(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTypeOfLicence(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDescriptionOfOutletLocation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNumberOfEmployees(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setHasSisterBranch(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setNumberOfCustomersPerDay(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setRestockFrequency(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDateOutletOpened(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setDateCreated(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setLastUpdated(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setIsDirty(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setTradingCenter(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSubcountyUuid(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSubcountyId(cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Customer entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Customer entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "customers" to-many relationship of Subcounty. */
    public List<Customer> _querySubcounty_Customers(String subcountyId) {
        synchronized (this) {
            if (subcounty_CustomersQuery == null) {
                QueryBuilder<Customer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SubcountyId.eq(null));
                subcounty_CustomersQuery = queryBuilder.build();
            }
        }
        Query<Customer> query = subcounty_CustomersQuery.forCurrentThread();
        query.setParameter(0, subcountyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSubcountyDao().getAllColumns());
            builder.append(" FROM CUSTOMER T");
            builder.append(" LEFT JOIN SUBCOUNTY T0 ON T.'SUBCOUNTY_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Customer loadCurrentDeep(Cursor cursor, boolean lock) {
        Customer entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Subcounty subcounty = loadCurrentOther(daoSession.getSubcountyDao(), cursor, offset);
         if(subcounty != null) {
            entity.setSubcounty(subcounty);
        }

        return entity;    
    }

    public Customer loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Customer> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Customer> list = new ArrayList<Customer>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Customer> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Customer> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
