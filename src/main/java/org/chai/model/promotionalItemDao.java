package org.chai.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.promotionalItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROMOTIONAL_ITEM.
*/
public class promotionalItemDao extends AbstractDao<promotionalItem, Void> {

    public static final String TABLENAME = "PROMOTIONAL_ITEM";

    /**
     * Properties of entity promotionalItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property PromotionId = new Property(1, long.class, "promotionId", false, "PROMOTION_ID");
    };

    private DaoSession daoSession;

    private Query<promotionalItem> promotion_ItemsQuery;

    public promotionalItemDao(DaoConfig config) {
        super(config);
    }
    
    public promotionalItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROMOTIONAL_ITEM' (" + //
                "'NAME' TEXT NOT NULL ," + // 0: name
                "'PROMOTION_ID' INTEGER NOT NULL );"); // 1: promotionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROMOTIONAL_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, promotionalItem entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getName());
        stmt.bindLong(2, entity.getPromotionId());
    }

    @Override
    protected void attachEntity(promotionalItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public promotionalItem readEntity(Cursor cursor, int offset) {
        promotionalItem entity = new promotionalItem( //
            cursor.getString(offset + 0), // name
            cursor.getLong(offset + 1) // promotionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, promotionalItem entity, int offset) {
        entity.setName(cursor.getString(offset + 0));
        entity.setPromotionId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(promotionalItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(promotionalItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of promotion. */
    public List<promotionalItem> _queryPromotion_Items(long promotionId) {
        synchronized (this) {
            if (promotion_ItemsQuery == null) {
                QueryBuilder<promotionalItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PromotionId.eq(null));
                promotion_ItemsQuery = queryBuilder.build();
            }
        }
        Query<promotionalItem> query = promotion_ItemsQuery.forCurrentThread();
        query.setParameter(0, promotionId);
        return query.list();
    }

}
