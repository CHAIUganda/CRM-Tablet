package org.chai.model;

import java.util.List;
import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
@JsonIgnoreProperties(ignoreUnknown = true)
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {

    private Long id;
    /** Not-null value. */
    private String uuid;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String unitOfMeasure;
    /** Not-null value. */
    private String formulation;
    /** Not-null value. */
    private String unitPrice;
    private String groupName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private List<Promotion> promotions;
    private List<OrderData> orderDatas;
    private List<SaleData> salesDatas;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Product() {
    }

    public Product(Long id) {
        this.id = id;
    }

    public Product(Long id, String uuid, String name, String unitOfMeasure, String formulation, String unitPrice, String groupName) {
        this.id = id;
        this.uuid = uuid;
        this.name = name;
        this.unitOfMeasure = unitOfMeasure;
        this.formulation = formulation;
        this.unitPrice = unitPrice;
        this.groupName = groupName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getUnitOfMeasure() {
        return unitOfMeasure;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = unitOfMeasure;
    }

    /** Not-null value. */
    public String getFormulation() {
        return formulation;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFormulation(String formulation) {
        this.formulation = formulation;
    }

    /** Not-null value. */
    public String getUnitPrice() {
        return unitPrice;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUnitPrice(String unitPrice) {
        this.unitPrice = unitPrice;
    }

    public String getGroupName() {
        return groupName;
    }

    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Promotion> getPromotions() {
        if (promotions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PromotionDao targetDao = daoSession.getPromotionDao();
            List<Promotion> promotionsNew = targetDao._queryProduct_Promotions(id);
            synchronized (this) {
                if(promotions == null) {
                    promotions = promotionsNew;
                }
            }
        }
        return promotions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPromotions() {
        promotions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrderData> getOrderDatas() {
        if (orderDatas == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDataDao targetDao = daoSession.getOrderDataDao();
            List<OrderData> orderDatasNew = targetDao._queryProduct_OrderDatas(id);
            synchronized (this) {
                if(orderDatas == null) {
                    orderDatas = orderDatasNew;
                }
            }
        }
        return orderDatas;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrderDatas() {
        orderDatas = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleData> getSalesDatas() {
        if (salesDatas == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleDataDao targetDao = daoSession.getSaleDataDao();
            List<SaleData> salesDatasNew = targetDao._queryProduct_SalesDatas(id);
            synchronized (this) {
                if(salesDatas == null) {
                    salesDatas = salesDatasNew;
                }
            }
        }
        return salesDatas;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSalesDatas() {
        salesDatas = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
