package org.chai.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.chai.model.MalariaDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MALARIA_DETAIL.
*/
public class MalariaDetailDao extends AbstractDao<MalariaDetail, String> {

    public static final String TABLENAME = "MALARIA_DETAIL";

    /**
     * Properties of entity MalariaDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property DateOfSurvey = new Property(1, java.util.Date.class, "dateOfSurvey", false, "DATE_OF_SURVEY");
        public final static Property MalariaPatientsInFacility = new Property(2, Integer.class, "malariaPatientsInFacility", false, "MALARIA_PATIENTS_IN_FACILITY");
        public final static Property NumberOfChildren = new Property(3, Integer.class, "numberOfChildren", false, "NUMBER_OF_CHILDREN");
        public final static Property DoYouPrescribeTreatment = new Property(4, String.class, "doYouPrescribeTreatment", false, "DO_YOU_PRESCRIBE_TREATMENT");
        public final static Property HeardAboutGreenLeaf = new Property(5, String.class, "heardAboutGreenLeaf", false, "HEARD_ABOUT_GREEN_LEAF");
        public final static Property HowDidYouHear = new Property(6, String.class, "howDidYouHear", false, "HOW_DID_YOU_HEAR");
        public final static Property OtherWaysHowYouHeard = new Property(7, String.class, "otherWaysHowYouHeard", false, "OTHER_WAYS_HOW_YOU_HEARD");
        public final static Property HowYouSuspectMalaria = new Property(8, String.class, "howYouSuspectMalaria", false, "HOW_YOU_SUSPECT_MALARIA");
        public final static Property DoYouKnowMOHGuidelines = new Property(9, String.class, "doYouKnowMOHGuidelines", false, "DO_YOU_KNOW_MOHGUIDELINES");
        public final static Property MohGuidelines = new Property(10, String.class, "mohGuidelines", false, "MOH_GUIDELINES");
        public final static Property KnowAboutGreenLeafAntimalarials = new Property(11, String.class, "knowAboutGreenLeafAntimalarials", false, "KNOW_ABOUT_GREEN_LEAF_ANTIMALARIALS");
        public final static Property WhatGreenLeafRepresents = new Property(12, String.class, "whatGreenLeafRepresents", false, "WHAT_GREEN_LEAF_REPRESENTS");
        public final static Property DoYouPrescribeWithoutGreenLeaf = new Property(13, String.class, "doYouPrescribeWithoutGreenLeaf", false, "DO_YOU_PRESCRIBE_WITHOUT_GREEN_LEAF");
        public final static Property WhyPrescribeWithoutGreenLeaf = new Property(14, String.class, "whyPrescribeWithoutGreenLeaf", false, "WHY_PRESCRIBE_WITHOUT_GREEN_LEAF");
        public final static Property KnowWhatSevereMalariaIs = new Property(15, String.class, "knowWhatSevereMalariaIs", false, "KNOW_WHAT_SEVERE_MALARIA_IS");
        public final static Property SignsOfSevereMalaria = new Property(16, String.class, "signsOfSevereMalaria", false, "SIGNS_OF_SEVERE_MALARIA");
        public final static Property HowToManagePatientsWithSevereMalaria = new Property(17, String.class, "howToManagePatientsWithSevereMalaria", false, "HOW_TO_MANAGE_PATIENTS_WITH_SEVERE_MALARIA");
        public final static Property DoYouStockAntimalarials = new Property(18, Boolean.class, "doYouStockAntimalarials", false, "DO_YOU_STOCK_ANTIMALARIALS");
        public final static Property DoYouStockRDTs = new Property(19, Boolean.class, "doYouStockRDTs", false, "DO_YOU_STOCK_RDTS");
        public final static Property PointOfsaleMaterial = new Property(20, String.class, "pointOfsaleMaterial", false, "POINT_OFSALE_MATERIAL");
        public final static Property RecommendationNextStep = new Property(21, String.class, "recommendationNextStep", false, "RECOMMENDATION_NEXT_STEP");
        public final static Property Latitude = new Property(22, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(23, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsNew = new Property(24, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsHistory = new Property(25, Boolean.class, "isHistory", false, "IS_HISTORY");
        public final static Property TaskId = new Property(26, String.class, "taskId", false, "TASK_ID");
        public final static Property IsDirty = new Property(27, Boolean.class, "isDirty", false, "IS_DIRTY");
        public final static Property SyncronisationStatus = new Property(28, Integer.class, "syncronisationStatus", false, "SYNCRONISATION_STATUS");
        public final static Property SyncronisationMessage = new Property(29, String.class, "syncronisationMessage", false, "SYNCRONISATION_MESSAGE");
        public final static Property DateCreated = new Property(30, java.util.Date.class, "dateCreated", false, "DATE_CREATED");
        public final static Property LastUpdated = new Property(31, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
        public final static Property MalariadetailId = new Property(32, String.class, "malariadetailId", false, "MALARIADETAIL_ID");
    };

    private DaoSession daoSession;

    private Query<MalariaDetail> task_MalariadetailsQuery;

    public MalariaDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MalariaDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MALARIA_DETAIL' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'DATE_OF_SURVEY' INTEGER," + // 1: dateOfSurvey
                "'MALARIA_PATIENTS_IN_FACILITY' INTEGER," + // 2: malariaPatientsInFacility
                "'NUMBER_OF_CHILDREN' INTEGER," + // 3: numberOfChildren
                "'DO_YOU_PRESCRIBE_TREATMENT' TEXT," + // 4: doYouPrescribeTreatment
                "'HEARD_ABOUT_GREEN_LEAF' TEXT," + // 5: heardAboutGreenLeaf
                "'HOW_DID_YOU_HEAR' TEXT," + // 6: howDidYouHear
                "'OTHER_WAYS_HOW_YOU_HEARD' TEXT," + // 7: otherWaysHowYouHeard
                "'HOW_YOU_SUSPECT_MALARIA' TEXT," + // 8: howYouSuspectMalaria
                "'DO_YOU_KNOW_MOHGUIDELINES' TEXT," + // 9: doYouKnowMOHGuidelines
                "'MOH_GUIDELINES' TEXT," + // 10: mohGuidelines
                "'KNOW_ABOUT_GREEN_LEAF_ANTIMALARIALS' TEXT," + // 11: knowAboutGreenLeafAntimalarials
                "'WHAT_GREEN_LEAF_REPRESENTS' TEXT," + // 12: whatGreenLeafRepresents
                "'DO_YOU_PRESCRIBE_WITHOUT_GREEN_LEAF' TEXT," + // 13: doYouPrescribeWithoutGreenLeaf
                "'WHY_PRESCRIBE_WITHOUT_GREEN_LEAF' TEXT," + // 14: whyPrescribeWithoutGreenLeaf
                "'KNOW_WHAT_SEVERE_MALARIA_IS' TEXT," + // 15: knowWhatSevereMalariaIs
                "'SIGNS_OF_SEVERE_MALARIA' TEXT," + // 16: signsOfSevereMalaria
                "'HOW_TO_MANAGE_PATIENTS_WITH_SEVERE_MALARIA' TEXT," + // 17: howToManagePatientsWithSevereMalaria
                "'DO_YOU_STOCK_ANTIMALARIALS' INTEGER," + // 18: doYouStockAntimalarials
                "'DO_YOU_STOCK_RDTS' INTEGER," + // 19: doYouStockRDTs
                "'POINT_OFSALE_MATERIAL' TEXT," + // 20: pointOfsaleMaterial
                "'RECOMMENDATION_NEXT_STEP' TEXT," + // 21: recommendationNextStep
                "'LATITUDE' REAL," + // 22: latitude
                "'LONGITUDE' REAL," + // 23: longitude
                "'IS_NEW' INTEGER," + // 24: isNew
                "'IS_HISTORY' INTEGER," + // 25: isHistory
                "'TASK_ID' TEXT NOT NULL ," + // 26: taskId
                "'IS_DIRTY' INTEGER," + // 27: isDirty
                "'SYNCRONISATION_STATUS' INTEGER," + // 28: syncronisationStatus
                "'SYNCRONISATION_MESSAGE' TEXT," + // 29: syncronisationMessage
                "'DATE_CREATED' INTEGER," + // 30: dateCreated
                "'LAST_UPDATED' INTEGER," + // 31: lastUpdated
                "'MALARIADETAIL_ID' TEXT NOT NULL );"); // 32: malariadetailId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MALARIA_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MalariaDetail entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        java.util.Date dateOfSurvey = entity.getDateOfSurvey();
        if (dateOfSurvey != null) {
            stmt.bindLong(2, dateOfSurvey.getTime());
        }
 
        Integer malariaPatientsInFacility = entity.getMalariaPatientsInFacility();
        if (malariaPatientsInFacility != null) {
            stmt.bindLong(3, malariaPatientsInFacility);
        }
 
        Integer numberOfChildren = entity.getNumberOfChildren();
        if (numberOfChildren != null) {
            stmt.bindLong(4, numberOfChildren);
        }
 
        String doYouPrescribeTreatment = entity.getDoYouPrescribeTreatment();
        if (doYouPrescribeTreatment != null) {
            stmt.bindString(5, doYouPrescribeTreatment);
        }
 
        String heardAboutGreenLeaf = entity.getHeardAboutGreenLeaf();
        if (heardAboutGreenLeaf != null) {
            stmt.bindString(6, heardAboutGreenLeaf);
        }
 
        String howDidYouHear = entity.getHowDidYouHear();
        if (howDidYouHear != null) {
            stmt.bindString(7, howDidYouHear);
        }
 
        String otherWaysHowYouHeard = entity.getOtherWaysHowYouHeard();
        if (otherWaysHowYouHeard != null) {
            stmt.bindString(8, otherWaysHowYouHeard);
        }
 
        String howYouSuspectMalaria = entity.getHowYouSuspectMalaria();
        if (howYouSuspectMalaria != null) {
            stmt.bindString(9, howYouSuspectMalaria);
        }
 
        String doYouKnowMOHGuidelines = entity.getDoYouKnowMOHGuidelines();
        if (doYouKnowMOHGuidelines != null) {
            stmt.bindString(10, doYouKnowMOHGuidelines);
        }
 
        String mohGuidelines = entity.getMohGuidelines();
        if (mohGuidelines != null) {
            stmt.bindString(11, mohGuidelines);
        }
 
        String knowAboutGreenLeafAntimalarials = entity.getKnowAboutGreenLeafAntimalarials();
        if (knowAboutGreenLeafAntimalarials != null) {
            stmt.bindString(12, knowAboutGreenLeafAntimalarials);
        }
 
        String whatGreenLeafRepresents = entity.getWhatGreenLeafRepresents();
        if (whatGreenLeafRepresents != null) {
            stmt.bindString(13, whatGreenLeafRepresents);
        }
 
        String doYouPrescribeWithoutGreenLeaf = entity.getDoYouPrescribeWithoutGreenLeaf();
        if (doYouPrescribeWithoutGreenLeaf != null) {
            stmt.bindString(14, doYouPrescribeWithoutGreenLeaf);
        }
 
        String whyPrescribeWithoutGreenLeaf = entity.getWhyPrescribeWithoutGreenLeaf();
        if (whyPrescribeWithoutGreenLeaf != null) {
            stmt.bindString(15, whyPrescribeWithoutGreenLeaf);
        }
 
        String knowWhatSevereMalariaIs = entity.getKnowWhatSevereMalariaIs();
        if (knowWhatSevereMalariaIs != null) {
            stmt.bindString(16, knowWhatSevereMalariaIs);
        }
 
        String signsOfSevereMalaria = entity.getSignsOfSevereMalaria();
        if (signsOfSevereMalaria != null) {
            stmt.bindString(17, signsOfSevereMalaria);
        }
 
        String howToManagePatientsWithSevereMalaria = entity.getHowToManagePatientsWithSevereMalaria();
        if (howToManagePatientsWithSevereMalaria != null) {
            stmt.bindString(18, howToManagePatientsWithSevereMalaria);
        }
 
        Boolean doYouStockAntimalarials = entity.getDoYouStockAntimalarials();
        if (doYouStockAntimalarials != null) {
            stmt.bindLong(19, doYouStockAntimalarials ? 1l: 0l);
        }
 
        Boolean doYouStockRDTs = entity.getDoYouStockRDTs();
        if (doYouStockRDTs != null) {
            stmt.bindLong(20, doYouStockRDTs ? 1l: 0l);
        }
 
        String pointOfsaleMaterial = entity.getPointOfsaleMaterial();
        if (pointOfsaleMaterial != null) {
            stmt.bindString(21, pointOfsaleMaterial);
        }
 
        String recommendationNextStep = entity.getRecommendationNextStep();
        if (recommendationNextStep != null) {
            stmt.bindString(22, recommendationNextStep);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(23, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(24, longitude);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(25, isNew ? 1l: 0l);
        }
 
        Boolean isHistory = entity.getIsHistory();
        if (isHistory != null) {
            stmt.bindLong(26, isHistory ? 1l: 0l);
        }
        stmt.bindString(27, entity.getTaskId());
 
        Boolean isDirty = entity.getIsDirty();
        if (isDirty != null) {
            stmt.bindLong(28, isDirty ? 1l: 0l);
        }
 
        Integer syncronisationStatus = entity.getSyncronisationStatus();
        if (syncronisationStatus != null) {
            stmt.bindLong(29, syncronisationStatus);
        }
 
        String syncronisationMessage = entity.getSyncronisationMessage();
        if (syncronisationMessage != null) {
            stmt.bindString(30, syncronisationMessage);
        }
 
        java.util.Date dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(31, dateCreated.getTime());
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(32, lastUpdated.getTime());
        }
        stmt.bindString(33, entity.getMalariadetailId());
    }

    @Override
    protected void attachEntity(MalariaDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MalariaDetail readEntity(Cursor cursor, int offset) {
        MalariaDetail entity = new MalariaDetail( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // dateOfSurvey
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // malariaPatientsInFacility
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // numberOfChildren
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // doYouPrescribeTreatment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // heardAboutGreenLeaf
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // howDidYouHear
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // otherWaysHowYouHeard
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // howYouSuspectMalaria
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // doYouKnowMOHGuidelines
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mohGuidelines
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // knowAboutGreenLeafAntimalarials
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // whatGreenLeafRepresents
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // doYouPrescribeWithoutGreenLeaf
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // whyPrescribeWithoutGreenLeaf
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // knowWhatSevereMalariaIs
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // signsOfSevereMalaria
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // howToManagePatientsWithSevereMalaria
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // doYouStockAntimalarials
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // doYouStockRDTs
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pointOfsaleMaterial
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // recommendationNextStep
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // latitude
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // longitude
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // isNew
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // isHistory
            cursor.getString(offset + 26), // taskId
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // isDirty
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // syncronisationStatus
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // syncronisationMessage
            cursor.isNull(offset + 30) ? null : new java.util.Date(cursor.getLong(offset + 30)), // dateCreated
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // lastUpdated
            cursor.getString(offset + 32) // malariadetailId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MalariaDetail entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDateOfSurvey(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMalariaPatientsInFacility(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNumberOfChildren(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDoYouPrescribeTreatment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeardAboutGreenLeaf(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHowDidYouHear(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOtherWaysHowYouHeard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHowYouSuspectMalaria(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDoYouKnowMOHGuidelines(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMohGuidelines(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKnowAboutGreenLeafAntimalarials(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWhatGreenLeafRepresents(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDoYouPrescribeWithoutGreenLeaf(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWhyPrescribeWithoutGreenLeaf(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setKnowWhatSevereMalariaIs(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSignsOfSevereMalaria(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHowToManagePatientsWithSevereMalaria(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDoYouStockAntimalarials(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setDoYouStockRDTs(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setPointOfsaleMaterial(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRecommendationNextStep(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLatitude(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setLongitude(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setIsNew(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setIsHistory(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setTaskId(cursor.getString(offset + 26));
        entity.setIsDirty(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setSyncronisationStatus(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setSyncronisationMessage(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDateCreated(cursor.isNull(offset + 30) ? null : new java.util.Date(cursor.getLong(offset + 30)));
        entity.setLastUpdated(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setMalariadetailId(cursor.getString(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MalariaDetail entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MalariaDetail entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "malariadetails" to-many relationship of Task. */
    public List<MalariaDetail> _queryTask_Malariadetails(String taskId) {
        synchronized (this) {
            if (task_MalariadetailsQuery == null) {
                QueryBuilder<MalariaDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_MalariadetailsQuery = queryBuilder.build();
            }
        }
        Query<MalariaDetail> query = task_MalariadetailsQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskDao().getAllColumns());
            builder.append(" FROM MALARIA_DETAIL T");
            builder.append(" LEFT JOIN TASK T0 ON T.'TASK_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MalariaDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        MalariaDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Task task = loadCurrentOther(daoSession.getTaskDao(), cursor, offset);
         if(task != null) {
            entity.setTask(task);
        }

        return entity;    
    }

    public MalariaDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MalariaDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MalariaDetail> list = new ArrayList<MalariaDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MalariaDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MalariaDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
