package org.chai.model;

import java.util.List;
import org.chai.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PROMOTION.
 */
public class Promotion {

    /** Not-null value. */
    private String uuid;
    /** Not-null value. */
    private String description;
    /** Not-null value. */
    private java.util.Date startDate;
    /** Not-null value. */
    private java.util.Date stopDate;
    /** Not-null value. */
    private String productId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PromotionDao myDao;

    private Product product;
    private String product__resolvedKey;

    private List<PromotionalItem> items;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Promotion() {
    }

    public Promotion(String uuid) {
        this.uuid = uuid;
    }

    public Promotion(String uuid, String description, java.util.Date startDate, java.util.Date stopDate, String productId) {
        this.uuid = uuid;
        this.description = description;
        this.startDate = startDate;
        this.stopDate = stopDate;
        this.productId = productId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPromotionDao() : null;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public java.util.Date getStartDate() {
        return startDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    /** Not-null value. */
    public java.util.Date getStopDate() {
        return stopDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStopDate(java.util.Date stopDate) {
        this.stopDate = stopDate;
    }

    /** Not-null value. */
    public String getProductId() {
        return productId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProductId(String productId) {
        this.productId = productId;
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.productId;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        if (product == null) {
            throw new DaoException("To-one property 'productId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.product = product;
            productId = product.getUuid();
            product__resolvedKey = productId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PromotionalItem> getItems() {
        if (items == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PromotionalItemDao targetDao = daoSession.getPromotionalItemDao();
            List<PromotionalItem> itemsNew = targetDao._queryPromotion_Items(uuid);
            synchronized (this) {
                if(items == null) {
                    items = itemsNew;
                }
            }
        }
        return items;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItems() {
        items = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
