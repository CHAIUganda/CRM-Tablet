package org.chai.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADHOCK_SALE.
*/
public class AdhockSaleDao extends AbstractDao<AdhockSale, String> {

    public static final String TABLENAME = "ADHOCK_SALE";

    /**
     * Properties of entity AdhockSale.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property DateOfSale = new Property(1, java.util.Date.class, "dateOfSale", false, "DATE_OF_SALE");
        public final static Property DoYouStockOrsZinc = new Property(2, Boolean.class, "doYouStockOrsZinc", false, "DO_YOU_STOCK_ORS_ZINC");
        public final static Property IfNoWhy = new Property(3, String.class, "ifNoWhy", false, "IF_NO_WHY");
        public final static Property PointOfsaleMaterial = new Property(4, String.class, "pointOfsaleMaterial", false, "POINT_OFSALE_MATERIAL");
        public final static Property RecommendationNextStep = new Property(5, String.class, "recommendationNextStep", false, "RECOMMENDATION_NEXT_STEP");
        public final static Property GovernmentApproval = new Property(6, String.class, "governmentApproval", false, "GOVERNMENT_APPROVAL");
        public final static Property Latitude = new Property(7, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(8, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsHistory = new Property(9, Boolean.class, "isHistory", false, "IS_HISTORY");
        public final static Property StocksORS = new Property(10, Boolean.class, "stocksORS", false, "STOCKS_ORS");
        public final static Property StocksZinc = new Property(11, Boolean.class, "stocksZinc", false, "STOCKS_ZINC");
        public final static Property StocksACTs = new Property(12, Boolean.class, "stocksACTs", false, "STOCKS_ACTS");
        public final static Property StocksAmox = new Property(13, Boolean.class, "stocksAmox", false, "STOCKS_AMOX");
        public final static Property StocksRDT = new Property(14, Boolean.class, "stocksRDT", false, "STOCKS_RDT");
        public final static Property MinORSPrice = new Property(15, String.class, "minORSPrice", false, "MIN_ORSPRICE");
        public final static Property MinZincPrice = new Property(16, String.class, "minZincPrice", false, "MIN_ZINC_PRICE");
        public final static Property MinACTPrice = new Property(17, String.class, "minACTPrice", false, "MIN_ACTPRICE");
        public final static Property MinAmoxPrice = new Property(18, String.class, "minAmoxPrice", false, "MIN_AMOX_PRICE");
        public final static Property MinRDTPrice = new Property(19, String.class, "minRDTPrice", false, "MIN_RDTPRICE");
        public final static Property CustomerId = new Property(20, String.class, "customerId", false, "CUSTOMER_ID");
        public final static Property IsDirty = new Property(21, Boolean.class, "isDirty", false, "IS_DIRTY");
        public final static Property SyncronisationStatus = new Property(22, Integer.class, "syncronisationStatus", false, "SYNCRONISATION_STATUS");
        public final static Property SyncronisationMessage = new Property(23, String.class, "syncronisationMessage", false, "SYNCRONISATION_MESSAGE");
        public final static Property DateCreated = new Property(24, java.util.Date.class, "dateCreated", false, "DATE_CREATED");
        public final static Property LastUpdated = new Property(25, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    };

    private DaoSession daoSession;

    private Query<AdhockSale> customer_AdhockSalesQuery;

    public AdhockSaleDao(DaoConfig config) {
        super(config);
    }
    
    public AdhockSaleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADHOCK_SALE' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'DATE_OF_SALE' INTEGER NOT NULL ," + // 1: dateOfSale
                "'DO_YOU_STOCK_ORS_ZINC' INTEGER," + // 2: doYouStockOrsZinc
                "'IF_NO_WHY' TEXT," + // 3: ifNoWhy
                "'POINT_OFSALE_MATERIAL' TEXT," + // 4: pointOfsaleMaterial
                "'RECOMMENDATION_NEXT_STEP' TEXT," + // 5: recommendationNextStep
                "'GOVERNMENT_APPROVAL' TEXT," + // 6: governmentApproval
                "'LATITUDE' REAL," + // 7: latitude
                "'LONGITUDE' REAL," + // 8: longitude
                "'IS_HISTORY' INTEGER," + // 9: isHistory
                "'STOCKS_ORS' INTEGER," + // 10: stocksORS
                "'STOCKS_ZINC' INTEGER," + // 11: stocksZinc
                "'STOCKS_ACTS' INTEGER," + // 12: stocksACTs
                "'STOCKS_AMOX' INTEGER," + // 13: stocksAmox
                "'STOCKS_RDT' INTEGER," + // 14: stocksRDT
                "'MIN_ORSPRICE' TEXT," + // 15: minORSPrice
                "'MIN_ZINC_PRICE' TEXT," + // 16: minZincPrice
                "'MIN_ACTPRICE' TEXT," + // 17: minACTPrice
                "'MIN_AMOX_PRICE' TEXT," + // 18: minAmoxPrice
                "'MIN_RDTPRICE' TEXT," + // 19: minRDTPrice
                "'CUSTOMER_ID' TEXT NOT NULL ," + // 20: customerId
                "'IS_DIRTY' INTEGER," + // 21: isDirty
                "'SYNCRONISATION_STATUS' INTEGER," + // 22: syncronisationStatus
                "'SYNCRONISATION_MESSAGE' TEXT," + // 23: syncronisationMessage
                "'DATE_CREATED' INTEGER," + // 24: dateCreated
                "'LAST_UPDATED' INTEGER);"); // 25: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADHOCK_SALE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdhockSale entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindLong(2, entity.getDateOfSale().getTime());
 
        Boolean doYouStockOrsZinc = entity.getDoYouStockOrsZinc();
        if (doYouStockOrsZinc != null) {
            stmt.bindLong(3, doYouStockOrsZinc ? 1l: 0l);
        }
 
        String ifNoWhy = entity.getIfNoWhy();
        if (ifNoWhy != null) {
            stmt.bindString(4, ifNoWhy);
        }
 
        String pointOfsaleMaterial = entity.getPointOfsaleMaterial();
        if (pointOfsaleMaterial != null) {
            stmt.bindString(5, pointOfsaleMaterial);
        }
 
        String recommendationNextStep = entity.getRecommendationNextStep();
        if (recommendationNextStep != null) {
            stmt.bindString(6, recommendationNextStep);
        }
 
        String governmentApproval = entity.getGovernmentApproval();
        if (governmentApproval != null) {
            stmt.bindString(7, governmentApproval);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(9, longitude);
        }
 
        Boolean isHistory = entity.getIsHistory();
        if (isHistory != null) {
            stmt.bindLong(10, isHistory ? 1l: 0l);
        }
 
        Boolean stocksORS = entity.getStocksORS();
        if (stocksORS != null) {
            stmt.bindLong(11, stocksORS ? 1l: 0l);
        }
 
        Boolean stocksZinc = entity.getStocksZinc();
        if (stocksZinc != null) {
            stmt.bindLong(12, stocksZinc ? 1l: 0l);
        }
 
        Boolean stocksACTs = entity.getStocksACTs();
        if (stocksACTs != null) {
            stmt.bindLong(13, stocksACTs ? 1l: 0l);
        }
 
        Boolean stocksAmox = entity.getStocksAmox();
        if (stocksAmox != null) {
            stmt.bindLong(14, stocksAmox ? 1l: 0l);
        }
 
        Boolean stocksRDT = entity.getStocksRDT();
        if (stocksRDT != null) {
            stmt.bindLong(15, stocksRDT ? 1l: 0l);
        }
 
        String minORSPrice = entity.getMinORSPrice();
        if (minORSPrice != null) {
            stmt.bindString(16, minORSPrice);
        }
 
        String minZincPrice = entity.getMinZincPrice();
        if (minZincPrice != null) {
            stmt.bindString(17, minZincPrice);
        }
 
        String minACTPrice = entity.getMinACTPrice();
        if (minACTPrice != null) {
            stmt.bindString(18, minACTPrice);
        }
 
        String minAmoxPrice = entity.getMinAmoxPrice();
        if (minAmoxPrice != null) {
            stmt.bindString(19, minAmoxPrice);
        }
 
        String minRDTPrice = entity.getMinRDTPrice();
        if (minRDTPrice != null) {
            stmt.bindString(20, minRDTPrice);
        }
        stmt.bindString(21, entity.getCustomerId());
 
        Boolean isDirty = entity.getIsDirty();
        if (isDirty != null) {
            stmt.bindLong(22, isDirty ? 1l: 0l);
        }
 
        Integer syncronisationStatus = entity.getSyncronisationStatus();
        if (syncronisationStatus != null) {
            stmt.bindLong(23, syncronisationStatus);
        }
 
        String syncronisationMessage = entity.getSyncronisationMessage();
        if (syncronisationMessage != null) {
            stmt.bindString(24, syncronisationMessage);
        }
 
        java.util.Date dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(25, dateCreated.getTime());
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(26, lastUpdated.getTime());
        }
    }

    @Override
    protected void attachEntity(AdhockSale entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdhockSale readEntity(Cursor cursor, int offset) {
        AdhockSale entity = new AdhockSale( //
            cursor.getString(offset + 0), // uuid
            new java.util.Date(cursor.getLong(offset + 1)), // dateOfSale
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // doYouStockOrsZinc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ifNoWhy
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pointOfsaleMaterial
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recommendationNextStep
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // governmentApproval
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // latitude
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // longitude
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isHistory
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // stocksORS
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // stocksZinc
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // stocksACTs
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // stocksAmox
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // stocksRDT
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // minORSPrice
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // minZincPrice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // minACTPrice
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // minAmoxPrice
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // minRDTPrice
            cursor.getString(offset + 20), // customerId
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isDirty
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // syncronisationStatus
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // syncronisationMessage
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // dateCreated
            cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)) // lastUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdhockSale entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDateOfSale(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDoYouStockOrsZinc(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIfNoWhy(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPointOfsaleMaterial(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecommendationNextStep(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGovernmentApproval(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setIsHistory(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setStocksORS(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setStocksZinc(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setStocksACTs(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setStocksAmox(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setStocksRDT(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setMinORSPrice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMinZincPrice(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMinACTPrice(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMinAmoxPrice(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMinRDTPrice(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCustomerId(cursor.getString(offset + 20));
        entity.setIsDirty(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setSyncronisationStatus(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setSyncronisationMessage(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDateCreated(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setLastUpdated(cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AdhockSale entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AdhockSale entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "adhockSales" to-many relationship of Customer. */
    public List<AdhockSale> _queryCustomer_AdhockSales(String customerId) {
        synchronized (this) {
            if (customer_AdhockSalesQuery == null) {
                QueryBuilder<AdhockSale> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                queryBuilder.orderRaw("DATE_OF_SALE ASC");
                customer_AdhockSalesQuery = queryBuilder.build();
            }
        }
        Query<AdhockSale> query = customer_AdhockSalesQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
            builder.append(" FROM ADHOCK_SALE T");
            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AdhockSale loadCurrentDeep(Cursor cursor, boolean lock) {
        AdhockSale entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
         if(customer != null) {
            entity.setCustomer(customer);
        }

        return entity;    
    }

    public AdhockSale loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AdhockSale> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AdhockSale> list = new ArrayList<AdhockSale>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AdhockSale> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AdhockSale> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
