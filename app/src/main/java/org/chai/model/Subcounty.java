package org.chai.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
@JsonIgnoreProperties(ignoreUnknown = true)
// KEEP INCLUDES END
/**
 * Entity mapped to table SUBCOUNTY.
 */
public class Subcounty {

    /** Not-null value. */
    private String uuid;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String districtId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SubcountyDao myDao;

    private District district;
    private String district__resolvedKey;

    private List<Parish> parishes;
    private List<Customer> customers;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Subcounty() {
    }

    public Subcounty(String uuid) {
        this.uuid = uuid;
    }

    public Subcounty(String uuid, String name, String districtId) {
        this.uuid = uuid;
        this.name = name;
        this.districtId = districtId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSubcountyDao() : null;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getDistrictId() {
        return districtId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDistrictId(String districtId) {
        this.districtId = districtId;
    }

    /** To-one relationship, resolved on first access. */
    public District getDistrict() {
        String __key = this.districtId;
        if (district__resolvedKey == null || district__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DistrictDao targetDao = daoSession.getDistrictDao();
            District districtNew = targetDao.load(__key);
            synchronized (this) {
                district = districtNew;
            	district__resolvedKey = __key;
            }
        }
        return district;
    }

    public void setDistrict(District district) {
        if (district == null) {
            throw new DaoException("To-one property 'districtId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.district = district;
            districtId = district.getUuid();
            district__resolvedKey = districtId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Parish> getParishes() {
        if (parishes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParishDao targetDao = daoSession.getParishDao();
            List<Parish> parishesNew = targetDao._querySubcounty_Parishes(uuid);
            synchronized (this) {
                if(parishes == null) {
                    parishes = parishesNew;
                }
            }
        }
        return parishes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParishes() {
        parishes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Customer> getCustomers() {
        if (customers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerDao targetDao = daoSession.getCustomerDao();
            List<Customer> customersNew = targetDao._querySubcounty_Customers(uuid);
            synchronized (this) {
                if(customers == null) {
                    customers = customersNew;
                }
            }
        }
        return customers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomers() {
        customers = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
