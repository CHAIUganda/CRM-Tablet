package org.chai.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUMMARY_REPORT.
*/
public class SummaryReportDao extends AbstractDao<SummaryReport, String> {

    public static final String TABLENAME = "SUMMARY_REPORT";

    /**
     * Properties of entity SummaryReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Item = new Property(1, String.class, "item", false, "ITEM");
        public final static Property Week = new Property(2, String.class, "week", false, "WEEK");
        public final static Property Month = new Property(3, String.class, "month", false, "MONTH");
        public final static Property TeamAverageThisWeek = new Property(4, String.class, "teamAverageThisWeek", false, "TEAM_AVERAGE_THIS_WEEK");
        public final static Property TeamAverageThisMonth = new Property(5, String.class, "teamAverageThisMonth", false, "TEAM_AVERAGE_THIS_MONTH");
    };

    private DaoSession daoSession;


    public SummaryReportDao(DaoConfig config) {
        super(config);
    }
    
    public SummaryReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUMMARY_REPORT' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'ITEM' TEXT," + // 1: item
                "'WEEK' TEXT," + // 2: week
                "'MONTH' TEXT," + // 3: month
                "'TEAM_AVERAGE_THIS_WEEK' TEXT," + // 4: teamAverageThisWeek
                "'TEAM_AVERAGE_THIS_MONTH' TEXT);"); // 5: teamAverageThisMonth
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUMMARY_REPORT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SummaryReport entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(2, item);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(3, week);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(4, month);
        }
 
        String teamAverageThisWeek = entity.getTeamAverageThisWeek();
        if (teamAverageThisWeek != null) {
            stmt.bindString(5, teamAverageThisWeek);
        }
 
        String teamAverageThisMonth = entity.getTeamAverageThisMonth();
        if (teamAverageThisMonth != null) {
            stmt.bindString(6, teamAverageThisMonth);
        }
    }

    @Override
    protected void attachEntity(SummaryReport entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SummaryReport readEntity(Cursor cursor, int offset) {
        SummaryReport entity = new SummaryReport( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // item
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // week
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // month
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // teamAverageThisWeek
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // teamAverageThisMonth
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SummaryReport entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setItem(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeek(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMonth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTeamAverageThisWeek(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTeamAverageThisMonth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SummaryReport entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SummaryReport entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
