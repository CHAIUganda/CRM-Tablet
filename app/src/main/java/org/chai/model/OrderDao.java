package org.chai.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table orders.
*/
public class OrderDao extends AbstractDao<Order, String> {

    public static final String TABLENAME = "orders";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property DeliveryDate = new Property(1, java.util.Date.class, "deliveryDate", false, "DELIVERY_DATE");
        public final static Property OrderDate = new Property(2, java.util.Date.class, "orderDate", false, "ORDER_DATE");
        public final static Property CustomerId = new Property(3, String.class, "customerId", false, "CUSTOMER_ID");
        public final static Property IsDirty = new Property(4, Boolean.class, "isDirty", false, "IS_DIRTY");
        public final static Property SyncronisationStatus = new Property(5, Integer.class, "syncronisationStatus", false, "SYNCRONISATION_STATUS");
        public final static Property SyncronisationMessage = new Property(6, String.class, "syncronisationMessage", false, "SYNCRONISATION_MESSAGE");
        public final static Property DateCreated = new Property(7, java.util.Date.class, "dateCreated", false, "DATE_CREATED");
        public final static Property LastUpdated = new Property(8, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    };

    private DaoSession daoSession;

    private Query<Order> customer_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'orders' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uuid
                "'DELIVERY_DATE' INTEGER NOT NULL ," + // 1: deliveryDate
                "'ORDER_DATE' INTEGER NOT NULL ," + // 2: orderDate
                "'CUSTOMER_ID' TEXT NOT NULL ," + // 3: customerId
                "'IS_DIRTY' INTEGER," + // 4: isDirty
                "'SYNCRONISATION_STATUS' INTEGER," + // 5: syncronisationStatus
                "'SYNCRONISATION_MESSAGE' TEXT," + // 6: syncronisationMessage
                "'DATE_CREATED' INTEGER," + // 7: dateCreated
                "'LAST_UPDATED' INTEGER);"); // 8: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'orders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindLong(2, entity.getDeliveryDate().getTime());
        stmt.bindLong(3, entity.getOrderDate().getTime());
        stmt.bindString(4, entity.getCustomerId());
 
        Boolean isDirty = entity.getIsDirty();
        if (isDirty != null) {
            stmt.bindLong(5, isDirty ? 1l: 0l);
        }
 
        Integer syncronisationStatus = entity.getSyncronisationStatus();
        if (syncronisationStatus != null) {
            stmt.bindLong(6, syncronisationStatus);
        }
 
        String syncronisationMessage = entity.getSyncronisationMessage();
        if (syncronisationMessage != null) {
            stmt.bindString(7, syncronisationMessage);
        }
 
        java.util.Date dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(8, dateCreated.getTime());
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(9, lastUpdated.getTime());
        }
    }

    @Override
    protected void attachEntity(Order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.getString(offset + 0), // uuid
            new java.util.Date(cursor.getLong(offset + 1)), // deliveryDate
            new java.util.Date(cursor.getLong(offset + 2)), // orderDate
            cursor.getString(offset + 3), // customerId
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isDirty
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // syncronisationStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // syncronisationMessage
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // dateCreated
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // lastUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDeliveryDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setOrderDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCustomerId(cursor.getString(offset + 3));
        entity.setIsDirty(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setSyncronisationStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSyncronisationMessage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateCreated(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLastUpdated(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Order entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Order entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of Customer. */
    public List<Order> _queryCustomer_Orders(String customerId) {
        synchronized (this) {
            if (customer_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                queryBuilder.orderRaw("ORDER_DATE ASC");
                customer_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = customer_OrdersQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
            builder.append(" FROM orders T");
            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
        Order entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
         if(customer != null) {
            entity.setCustomer(customer);
        }

        return entity;    
    }

    public Order loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Order> list = new ArrayList<Order>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Order> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
